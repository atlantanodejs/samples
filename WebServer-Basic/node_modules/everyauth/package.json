{
  "name": "everyauth",
  "description": "Auth solution (password, facebook, & more) for your node.js Connect & Express apps",
  "version": "0.2.34",
  "homepage": "https://github.com/bnoguchi/everyauth/",
  "repository": {
    "type": "git",
    "url": "git://github.com/bnoguchi/everyauth.git"
  },
  "author": {
    "name": "Brian Noguchi",
    "email": "brian.noguchi@gmail.com",
    "url": "https://github.com/bnoguchi/"
  },
  "keywords": [
    "auth",
    "oauth",
    "password",
    "facebook",
    "openid",
    "twitter",
    "dropbox",
    "authorization",
    "authentication",
    "connect",
    "express"
  ],
  "main": "./index.js",
  "directories": {
    "lib": "lib"
  },
  "dependencies": {
    "oauth": "https://github.com/ciaranj/node-oauth/tarball/master",
    "request": "2.9.x",
    "connect": "2.3.x",
    "openid": ">=0.2.0",
    "xml2js": ">=0.1.7",
    "node-swt": ">=0.1.1",
    "node-wsfederation": ">=0.1.1",
    "debug": "0.5.0",
    "express": "3.x"
  },
  "devDependencies": {
    "jade": ">=0.12.1",
    "tobi": ">=0.2.2",
    "expect.js": ">=0.1.2",
    "mocha": ">=0.13.0",
    "satisfy": ">=0.1.0"
  },
  "engines": {
    "node": ">=0.4"
  },
  "optionalDependencies": {},
  "readme": "everyauth\r\n==========\r\n\r\nAuthentication and authorization (password, facebook, & more) for your node.js Connect and Express apps.\r\n\r\nThere is a NodeTuts screencast of everyauth [here](http://nodetuts.com/tutorials/26-starting-with-everyauth.html#video)\r\n\r\nThere is also a Google Groups (recently created)\r\n[here](http://groups.google.com/group/everyauth) to post questions and discuss\r\npotential ideas and extensions to the library.\r\n\r\nSo far, `everyauth` enables you to login via:\r\n\r\n<table style=\"text-align:left\">\r\n  <thead>\r\n    <tr>\r\n         <th> Authenticate Via                                                                                                             <th> Credits\r\n    </tr>\r\n  </thead>\r\n  <tbody>\r\n    <tr> <td> Password                                                                                                                     <td>\r\n    <tr> <td> <img src=\"https://github.com/bnoguchi/everyauth/raw/master/media/facebook.ico\" style=\"vertical-align:middle\"> Facebook       <td>\r\n    <tr> <td> <img src=\"https://github.com/bnoguchi/everyauth/raw/master/media/twitter.ico\" style=\"vertical-align:middle\"> Twitter         <td>\r\n    <tr> <td> <img src=\"https://github.com/bnoguchi/everyauth/raw/master/media/google.ico\" style=\"vertical-align:middle\"> Google           <td>\r\n    <tr> <td> <img src=\"https://github.com/bnoguchi/everyauth/raw/master/media/google.ico\" style=\"vertical-align:middle\"> Google Hybrid    <td> <a href=\"https://github.com/rocketlabsdev\">RocketLabs Development</a>\r\n    <tr> <td> <img src=\"https://github.com/bnoguchi/everyauth/raw/master/media/linkedin.ico\" style=\"vertical-align:middle\"> LinkedIn       <td>\r\n    <tr> <td> <img src=\"https://github.com/bnoguchi/everyauth/raw/master/media/dropbox.ico\" style=\"vertical-align:middle\"> Dropbox         <td> <a href=\"https://github.com/torgeir\">Torgeir</a>\r\n    <tr> <td> <img src=\"https://github.com/bnoguchi/everyauth/raw/master/media/tumblr.jpg\" style=\"vertical-align:middle\"> Tumblr           <td>\r\n    <tr> <td> <img src=\"https://github.com/bnoguchi/everyauth/raw/master/media/evernote.ico\" style=\"vertical-align:middle\"> Evernote         <td> <a href=\"https://github.com/dannyamey\">Danny Amey</a>\r\n    <tr> <td> <img src=\"https://github.com/bnoguchi/everyauth/raw/master/media/github.ico\" style=\"vertical-align:middle\"> Github           <td>\r\n    <tr> <td> <img src=\"https://github.com/bnoguchi/everyauth/raw/master/media/instagram.ico\" style=\"vertical-align:middle\"> Instagram     <td>\r\n    <tr> <td> <img src=\"https://github.com/bnoguchi/everyauth/raw/master/media/foursquare.ico\" style=\"vertical-align:middle\"> Foursquare   <td>\r\n    <tr> <td> <img src=\"https://github.com/bnoguchi/everyauth/raw/master/media/yahoo.ico\" style=\"vertical-align:middle\"> Yahoo!            <td>\r\n    <tr> <td> <img src=\"https://github.com/bnoguchi/everyauth/raw/master/media/justintv.ico\" style=\"vertical-align:middle\"> Justin.tv      <td> <a href=\"https://github.com/slickplaid\">slickplaid</a>\r\n    <tr> <td> <img src=\"https://github.com/bnoguchi/everyauth/raw/master/media/vimeo.gif\" style=\"vertical-align:middle\"> Vimeo             <td> <a href=\"https://github.com/slickplaid\">slickplaid</a>\r\n    <tr> <td> <img src=\"https://github.com/bnoguchi/everyauth/raw/master/media/37signals.ico\" style=\"vertical-align:middle\"> 37signals \r\n                                                                                              (Basecamp, Highrise, Backpack, Campfire)     <td>\r\n    <tr> <td> <img src=\"https://github.com/bnoguchi/everyauth/raw/master/media/readability.ico\" style=\"vertical-align:middle\"> Readability <td> <a href=\"https://github.com/alfrednerstu\">Alfred Nerstu</a>\r\n    <tr> <td> <img src=\"https://github.com/bnoguchi/everyauth/raw/master/media/angellist.ico\" style=\"vertical-align:middle\" width=\"16px\" height=\"16px\"> AngelList     <td>\r\n    <tr> <td> <img src=\"https://github.com/bnoguchi/everyauth/raw/master/media/dwolla.ico\" style=\"vertical-align:middle\"> Dwolla           <td> <a href=\"https://github.com/nanek\">Kenan Shifflett</a>\r\n    <tr> <td> <img src=\"https://github.com/bnoguchi/everyauth/raw/master/media/osm.ico\" style=\"vertical-align:middle\"> OpenStreetMap       <td> <a href=\"https://github.com/christophlsa\">Christoph Giesel</a>\r\n    <tr> <td> <img src=\"https://github.com/meritt/everyauth/raw/vkontakte/media/vkontakte.ico\" style=\"vertical-align:middle\"> VKontakte (Russian Social Network) <td> <a href=\"https://github.com/meritt\">Alexey Simonenko</a>\r\n    <tr> <td> <img src=\"https://github.com/biggora/everyauth/raw/master/media/mailru.ico\" style=\"vertical-align:middle\"> Mail.ru (Russian Social Network) <td> <a href=\"https://github.com/biggora\">Alexey Gordeyev</a>\r\n    <tr> <td> <img src=\"https://github.com/bnoguchi/everyauth/raw/master/media/skyrock.ico\" style=\"vertical-align:middle\" width=\"16px\" height=\"16px\"> Skyrock         <td> <a href=\"https://github.com/srod\">Rodolphe Stoclin</a>\r\n    <tr> <td> <img src=\"https://github.com/bnoguchi/everyauth/raw/master/media/gowalla.ico\" style=\"vertical-align:middle\"> Gowalla         <td> <a href=\"https://github.com/andykram\">Andrew Kramolisch</a>\r\n    <tr> <td> <img src=\"https://github.com/bnoguchi/everyauth/raw/master/media/tripit.png\" style=\"vertical-align:middle\"> TripIt           <td> <a href=\"https://github.com/pirxpilot\">Damian Krzeminski</a>\r\n    <tr> <td> <img src=\"https://github.com/bnoguchi/everyauth/raw/master/media/500px.ico\" style=\"vertical-align:middle\"> 500px             <td> <a href=\"https://github.com/dannyamey\">Danny Amey</a>\r\n    <tr> <td> <img src=\"https://github.com/bnoguchi/everyauth/raw/master/media/soundcloud.ico\" style=\"vertical-align:middle\"> SoundCloud   <td> <a href=\"https://github.com/chrisleishman\">Chris Leishman</a>\r\n    <tr> <td> <img src=\"https://github.com/bnoguchi/everyauth/raw/master/media/mixi.ico\" style=\"vertical-align:middle\"> mixi\r\n       <td> <a href=\"https://github.com/ufssf\">ufssf</a>\r\n    <tr> <td> <img src=\"http://static.mailchimp.com/www/downloads/brand-assets/Freddie_Light_Background.png\" style=\"vertical-align:middle\" width=\"16px\"> Mailchimp\r\n      <td> <a href=\"http://github.com/wnadeau\">Winfred Nadeau</a>\r\n    <tr> <td> <img src=\"https://github.com/bnoguchi/everyauth/raw/master/media/mendeley.ico\" style=\"vertical-align:middle\"> Mendeley\r\n       <td> <a href=\"https://github.com/edy-b\">Eduard Baun</a>\r\n  </tbody>\r\n  <tbody id=misc>\r\n    <tr> <td> <img src=\"https://github.com/bnoguchi/everyauth/raw/master/media/box.ico\" style=\"vertical-align:middle\"> Box.net             <td>\r\n    <tr> <td> <img src=\"https://github.com/bnoguchi/everyauth/raw/master/media/openid.ico\" style=\"vertical-align:middle\" width=\"16px\" height=\"16px\"> OpenId           <td> <a href=\"https://github.com/rocketlabsdev\">RocketLabs Development</a>, <a href=\"https://github.com/starfishmod\">Andrew Mee, <a href=\"https://github.com/bnoguchi\">Brian Noguchi</a> \r\n    <tr> <td> LDAP (experimental; not production-tested)                                                                                   <td>\r\n    <tr> <td> Windows Azure Access Control Service (ACS)<td> <a href=\"https://github.com/darrenzully\">Dario Renzulli</a>, <a href=\"https://github.com/jpgarcia\">Juan Pablo Garcia</a>, <a href=\"https://github.com/woloski\">Matias Woloski</a> from <a href=\"http://blogs.southworks.net/\">Southworks</a>\r\n  </tbody>\r\n</table>\r\n\r\n`everyauth` is:\r\n\r\n- **Modular** - We have you covered with Facebook and Twitter \r\n  OAuth logins, basic login/password support, and modules \r\n  coming soon for beta invitation support and more.\r\n- **Easily Configurable** - everyauth was built with powerful\r\n  configuration needs in mind. Configure an authorization strategy \r\n  in a straightforward, easy-to-read & easy-to-write approach, \r\n  with as much granularity as you want over the steps and \r\n  logic of your authorization strategy.\r\n- **Idiomatic** - The syntax for configuring and extending your authorization strategies are\r\n  idiomatic and chainable.\r\n\r\n\r\n## Installation\r\n    $ npm install everyauth\r\n\r\n## Quick Start\r\n\r\nIncorporate everyauth into your express app in just 2 easy steps.\r\n\r\n1. **Choose and Configure Auth Strategies** - Find the authentication strategy\r\n   you desire in one of the sections below. Follow the configuration\r\n   instructions.\r\n2. **Add the Middleware to Express**\r\n\r\n    ```javascript\r\n    var everyauth = require('everyauth');\r\n    // Step 1 code goes here\r\n\r\n    // Step 2 code\r\n    var express = require('express');\r\n    var app = express();\r\n    app\r\n      .use(express.bodyParser())\r\n      .use(express.cookieParser('mr ripley'))\r\n      .use(express.session())\r\n      .use(everyauth.middleware(app));\r\n    ```\r\n\r\n## Example Application\r\n\r\nThere is an example application at [./example](https://github.com/bnoguchi/everyauth/tree/master/example)\r\n\r\nTo run it:\r\n\r\n    $ cd example\r\n    $ node server.js\r\n\r\n**Important** - Some OAuth Providers do not allow callbacks to localhost, so you will need to create a `localhost`\r\nalias called `local.host`. Make sure you set up your /etc/hosts so that 127.0.0.1 is also \r\nassociated with 'local.host'. So inside your /etc/hosts file, one of the lines will look like:\r\n\r\n    127.0.0.1\tlocalhost local.host\r\n\r\nThen point your browser to [http://local.host:3000](http://local.host:3000)\r\n\r\n## Tests\r\n\r\n    $ npm install everyauth --dev\r\n\r\nThen, update test/creds.js with credentials that the integration tests use to\r\nlogin to each 3rd party service.\r\n\r\n    $ make test\r\n\r\n## Accessing the User\r\n\r\nIf you are using `express` or `connect`, then `everyauth` \r\nprovides an easy way to access the user as:\r\n\r\n- `req.user` from your app server\r\n- `everyauth.user` via the `everyauth` helper accessible from your `express` views.\r\n- `user` as a helper accessible from your `express` views\r\n\r\nTo access the user, configure `everyauth.everymodule.findUserById` and\r\noptionally `everyauth.everymodule.userPkey`.\r\nFor example, using [mongoose](http://github.com/LearnBoost/mongoose):\r\n\r\n```javascript\r\neveryauth.everymodule.findUserById( function (userId, callback) {\r\n  User.findById(userId, callback);\r\n  // callback has the signature, function (err, user) {...}\r\n});\r\n```\r\n\r\nIf you need access to the request object the function can have three arguments:\r\n\r\n```javascript\r\neveryauth.everymodule.findUserById( function (req, userId, callback) {\r\n\r\n  // use the request in some way ...\r\n\r\n  // callback has the signature, function (err, user) {...}\r\n});\r\n```\r\n\r\nOnce you have configured this method, you now have access to the user object\r\nthat was fetched anywhere in your server app code as `req.user`. For instance:\r\n\r\n```javascript\r\nvar app = require('express').createServer()\r\n\r\n// Configure your app\r\n\r\napp.get('/', function (req, res) {\r\n  console.log(req.user);  // FTW!\r\n  res.render('home');\r\n});\r\n```\r\n\r\nMoreover, you can access the user in your views as `everyauth.user` or as `user`.\r\n\r\n    //- Inside ./views/home.jade\r\n    span.user-id= everyauth.user.name\r\n    #user-id= user.id\r\n\r\n`everyauth` assumes that you store your users with an `id` property. If not --\r\ne.g, if you adopt the convention `user.uid` over `user.id` -- then just make\r\nsure to configure the `everyauth.everymodule.userPkey` parameter:\r\n\r\n```javascript\r\neveryauth.everymodule.userPkey('uid');\r\n```\r\n\r\n## Express Helpers\r\n\r\nIf you are using express, everyauth comes with some useful dynamic helpers.\r\nTo enable them:\r\n\r\n```javascript\r\nvar express = require('express')\r\n  , everyauth = require('everyauth')\r\n  , app = express.createServer();\r\n\r\neveryauth.helpExpress(app);\r\n```\r\n\r\nThen, from within your views, you will have access to the following helpers methods\r\nattached to the helper, `everyauth`:\r\n\r\n- `everyauth.loggedIn`\r\n- `everyauth.user` - the User document associated with the session\r\n- `everyauth.facebook` - The is equivalent to what is stored at `req.session.auth.facebook`, \r\n  so you can do things like ...\r\n- `everyauth.facebook.user` - returns the user json provided from the OAuth provider.\r\n- `everyauth.facebook.accessToken` - returns the access_token provided from the OAuth provider\r\n  for authorized API calls on behalf of the user.\r\n- And you also get this pattern for other modules - e.g., `everyauth.twitter.user`, \r\n  `everyauth.github.user`, etc.\r\n\r\nYou also get access to the view helper\r\n\r\n- `user` - the same as `everyauth.user` above\r\n\r\nAs an example of how you would use these, consider the following `./views/user.jade` jade template:\r\n\r\n    .user-id\r\n      .label User Id\r\n      .value #{user.id}\r\n    .facebook-id\r\n      .label User Facebook Id\r\n      .value #{everyauth.facebook.user.id}\r\n\r\nIf you already have an express helper named `user`, then you can configure\r\n`everyauth` to use a different helper name to access the user object that\r\neveryauth manages. To do so, leverage the `userAlias` option for\r\n`everyauth.helpExpress`:\r\n\r\n```javascript\r\neveryauth.helpExpress(app, { userAlias: '__user__' });\r\n```\r\n\r\nThen, you could access the user object in your view with the helper `__user__`\r\ninstead of the default helper `user`. So you can compare with the default use\r\nof helpers given previously, the alternative leveraging userAlias would look like:\r\n\r\n    .user-id\r\n      .label User Id\r\n      .value #{__user__.id}\r\n    .facebook-id\r\n      .label User Facebook Id\r\n      .value #{everyauth.facebook.user.id}\r\n\r\n`everyauth` also provides convenience methods on the `ServerRequest` instance `req`. \r\nFrom any scope that has access to `req`, you get the following convenience getters and methods:\r\n\r\n- `req.loggedIn` - a Boolean getter that tells you if the request is by a logged in user\r\n- `req.user`     - the User document associated with the session\r\n- `req.logout()` - clears the sesion of your auth data\r\n\r\n## Logging Out\r\n\r\nIf you integrate `everyauth` with `connect`, then `everyauth` automatically\r\nsets up a `logoutPath` at `GET` `/logout` for your app. It also\r\nsets a default handler for your logout route that clears your session\r\nof auth information and redirects them to '/'.\r\n\r\nTo over-write the logout path:\r\n\r\n```javascript\r\neveryauth.everymodule.logoutPath('/bye');\r\n```\r\n\r\nTo over-write the logout redirect path:\r\n\r\n```javascript\r\neveryauth.everymodule.logoutRedirectPath('/navigate/to/after/logout');\r\n```\r\n\r\nTo over-write the logout handler:\r\n\r\n```javascript\r\neveryauth.everymodule.handleLogout( function (req, res) {\r\n  // Put you extra logic here\r\n  \r\n  req.logout(); // The logout method is added for you by everyauth, too\r\n  \r\n  // And/or put your extra logic here\r\n  \r\n  this.redirect(res, this.logoutRedirectPath());\r\n});\r\n```\r\n\r\n## Custom redirect on password-based login or registration\r\n\r\nYou may want your own callback that decides where to send a user after login or registration.  One way of doing this is with the `respondToLoginSucceed` and `respondToRegistrationSucceed` methods.  This assumes that you have set a `.redirectTo` property on your `req.session` object:\r\n\r\n```javascript\r\neveryauth.password\r\n  .respondToLoginSucceed( function (res, user, data) {\r\n    if (user) {\r\n      this.redirect(res, data.session.redirectTo)\r\n    }   \r\n  })\r\n  .respondToRegistrationSucceed( function (res, user, data) {\r\n    this.redirect(res, data.session.redirectTo)\r\n  })\r\n```\r\n\r\nIf you are using express and want your redirects to be subject to [express\r\nredirect mapping](http://expressjs.com/guide.html#res.redirect\\(\\)), you can\r\noverwrite redirect method employed by everyauth.\r\n\r\n```javascript\r\neveryauth.everymodule\r\n  .performRedirect( function (res, location) {\r\n    res.redirect(location, 303);\r\n  });\r\n```\r\n\r\nA newly defined method will be used by everyauth to perform all redirects.\r\n\r\n# Auth Strategy Instructions\r\n\r\n## Facebook Connect\r\n\r\n```javascript\r\nvar everyauth = require('everyauth')\r\n  , connect = require('connect');\r\n\r\neveryauth.facebook\r\n  .appId('YOUR APP ID HERE')\r\n  .appSecret('YOUR APP SECRET HERE')\r\n  .handleAuthCallbackError( function (req, res) {\r\n    // If a user denies your app, Facebook will redirect the user to\r\n    // /auth/facebook/callback?error_reason=user_denied&error=access_denied&error_description=The+user+denied+your+request.\r\n    // This configurable route handler defines how you want to respond to\r\n    // that.\r\n    // If you do not configure this, everyauth renders a default fallback\r\n    // view notifying the user that their authentication failed and why.\r\n  })\r\n  .findOrCreateUser( function (session, accessToken, accessTokExtra, fbUserMetadata) {\r\n    // find or create user logic goes here\r\n  })\r\n  .redirectPath('/');\r\n\r\nvar routes = function (app) {\r\n  // Define your routes here\r\n};\r\n\r\nconnect(\r\n    connect.bodyParser()\r\n  , connect.cookieParser()\r\n  , connect.session({secret: 'whodunnit'})\r\n  , everyauth.middleware()\r\n  , connect.router(routes);\r\n).listen(3000);\r\n```\r\n\r\nYou can also configure more parameters (most are set to defaults) via\r\nthe same chainable API:\r\n\r\n```javascript\r\neveryauth.facebook\r\n  .entryPath('/auth/facebook')\r\n  .callbackPath('/auth/facebook/callback')\r\n  .scope('email')                        // Defaults to undefined\r\n  .fields('id,name,email,picture')       // Controls the returned fields. Defaults to undefined\r\n```\r\n\r\nIf you want to see what the current value of a\r\nconfigured parameter is, you can do so via:\r\n\r\n```javascript\r\neveryauth.facebook.scope(); // undefined\r\neveryauth.facebook.fields(); // undefined\r\neveryauth.facebook.entryPath(); // '/auth/facebook'\r\n```\r\n\r\nTo see all parameters that are configurable, the following will return an\r\nobject whose parameter name keys map to description values:\r\n\r\n```javascript\r\neveryauth.facebook.configurable();\r\n```\r\n\r\n### Dynamic Facebook Connect Scope\r\n\r\nFacebook provides many different \r\n[permissions](http://developers.facebook.com/docs/authentication/permissions/)\r\nfor which your app can ask your user. This is bundled up in the `scope` query\r\nparemter sent with the oauth request to Facebook. While your app may require \r\nseveral different permissions from Facebook, Facebook recommends that you only\r\nask for these permissions incrementally, as you need them. For example, you might\r\nwant to only ask for the \"email\" scope upon registration. At the same time, for\r\nanother user, you may want to ask for \"user_status\" permissions because they\r\nhave progressed further along in your application.\r\n\r\n`everyauth` enables you to specify the \"scope\" dynamically with a second\r\nvariation of the configurable `scope`. In addition to the first variation\r\nthat looks like:\r\n\r\n```javascript\r\neveryauth.facebook\r\n  .scope('email,user_status');\r\n```\r\n\r\nyou can have greater dynamic control over \"scope\" via the second variation of `scope`:\r\n\r\n```javascript\r\neveryauth.facebook\r\n  .scope( function (req, res) {\r\n    var session = req.session;\r\n    switch (session.userPhase) {\r\n      case 'registration':\r\n        return 'email';\r\n      case 'share-media':\r\n        return 'email,user_status';\r\n    }\r\n  });\r\n\r\n```\r\n\r\n### Facebook Mobile OAuth Dialog\r\nIf you are programming for mobile, you can bring up the facebook mobile OAuth\r\ndialog instead of the traditional desktop browser-based one by just adding\r\n`mobile(true)` to your configuration as seen here:\r\n\r\n```javascript\r\neveryauth.facebook\r\n  .mobile(true)\r\n  .appId('YOUR APP ID HERE')\r\n  .appSecret('YOUR APP SECRET HERE')\r\n  // rest of configuration\r\n```\r\n\r\n## Twitter OAuth\r\n\r\n```javascript\r\nvar everyauth = require('everyauth')\r\n  , connect = require('connect');\r\n\r\neveryauth.twitter\r\n  .consumerKey('YOUR CONSUMER ID HERE')\r\n  .consumerSecret('YOUR CONSUMER SECRET HERE')\r\n  .findOrCreateUser( function (session, accessToken, accessTokenSecret, twitterUserMetadata) {\r\n    // find or create user logic goes here\r\n  })\r\n  .redirectPath('/');\r\n\r\nvar routes = function (app) {\r\n  // Define your routes here\r\n};\r\n\r\nconnect(\r\n    connect.bodyParser()\r\n  , connect.cookieParser()\r\n  , connect.session({secret: 'whodunnit'})\r\n  , everyauth.middleware()\r\n  , connect.router(routes);\r\n).listen(3000);\r\n```\r\n\r\n**Important** - Some developers forget to do the following, and it causes them to have issues with `everyauth`.\r\nPlease make sure to do the following: When you set up your app at http://dev.twitter.com/, make sure that your callback url is set up to\r\ninclude that path '/auth/twitter/callback/'. In general, when dealing with OAuth or OAuth2 modules\r\nprovided by `everyauth`, the default callback path is always set up to follow the pattern\r\n'/auth/#{moduleName}/callback', so just ensure that you configure your OAuth settings accordingly with\r\nthe OAuth provider -- in this case, the \"Edit Application Settings\" section for your app at http://dev.twitter.com.\r\n\r\nAlternatively, you can specify the callback url at the application level by configuring `callbackPath` (which\r\nhas a default configuration of \"/auth/twitter/callback\"):\r\n\r\n```javascript\r\neveryauth.twitter\r\n  .consumerKey('YOUR CONSUMER ID HERE')\r\n  .consumerSecret('YOUR CONSUMER SECRET HERE')\r\n  .callbackPath('/custom/twitter/callback/path')\r\n  .findOrCreateUser( function (session, accessToken, accessTokenSecret, twitterUserMetadata) {\r\n    // find or create user logic goes here\r\n  })\r\n  .redirectPath('/');\r\n```\r\n\r\nSo if your hostname is `example.com`, then this configuration will over-ride the `dev.twitter.com` callback url configuration.\r\nInstead, Twitter will redirect back to `example.com/custom/twitter/callback/path` in the example just given above.\r\n\r\nYou can also configure more parameters (most are set to defaults) via\r\nthe same chainable API:\r\n\r\n```javascript\r\neveryauth.twitter\r\n  .entryPath('/auth/twitter')\r\n  .callbackPath('/auth/twitter/callback');\r\n```\r\n\r\nIf you want to see what the current value of a\r\nconfigured parameter is, you can do so via:\r\n\r\n```javascript\r\neveryauth.twitter.callbackPath(); // '/auth/twitter/callback'\r\neveryauth.twitter.entryPath(); // '/auth/twitter'\r\n```\r\n\r\nTo see all parameters that are configurable, the following will return an\r\nobject whose parameter name keys map to description values:\r\n\r\n```javascript\r\neveryauth.twitter.configurable();\r\n```\r\n\r\n## Password Authentication\r\n\r\n```javascript\r\nvar everyauth = require('everyauth')\r\n  , connect = require('connect');\r\n\r\neveryauth.password\r\n  .getLoginPath('/login') // Uri path to the login page\r\n  .postLoginPath('/login') // Uri path that your login form POSTs to\r\n  .loginView('a string of html; OR the name of the jade/etc-view-engine view')\r\n  .authenticate( function (login, password) {\r\n    // Either, we return a user or an array of errors if doing sync auth.\r\n    // Or, we return a Promise that can fulfill to promise.fulfill(user) or promise.fulfill(errors)\r\n    // `errors` is an array of error message strings\r\n    //\r\n    // e.g., \r\n    // Example 1 - Sync Example\r\n    // if (usersByLogin[login] && usersByLogin[login].password === password) {\r\n    //   return usersByLogin[login];\r\n    // } else {\r\n    //   return ['Login failed'];\r\n    // }\r\n    //\r\n    // Example 2 - Async Example\r\n    // var promise = this.Promise()\r\n    // YourUserModel.find({ login: login}, function (err, user) {\r\n    //   if (err) return promise.fulfill([err]);\r\n    //   promise.fulfill(user);\r\n    // }\r\n    // return promise;\r\n  })\r\n  .loginSuccessRedirect('/') // Where to redirect to after a login\r\n  \r\n    // If login fails, we render the errors via the login view template,\r\n    // so just make sure your loginView() template incorporates an `errors` local.\r\n    // See './example/views/login.jade'\r\n\r\n  .getRegisterPath('/register') // Uri path to the registration page\r\n  .postRegisterPath('/register') // The Uri path that your registration form POSTs to\r\n  .registerView('a string of html; OR the name of the jade/etc-view-engine view')\r\n  .validateRegistration( function (newUserAttributes) {\r\n    // Validate the registration input\r\n    // Return undefined, null, or [] if validation succeeds\r\n    // Return an array of error messages (or Promise promising this array)\r\n    // if validation fails\r\n    //\r\n    // e.g., assuming you define validate with the following signature\r\n    // var errors = validate(login, password, extraParams);\r\n    // return errors;\r\n    //\r\n    // The `errors` you return show up as an `errors` local in your jade template\r\n  })\r\n  .registerUser( function (newUserAttributes) {\r\n    // This step is only executed if we pass the validateRegistration step without\r\n    // any errors.\r\n    //\r\n    // Returns a user (or a Promise that promises a user) after adding it to\r\n    // some user store.\r\n    //\r\n    // As an edge case, sometimes your database may make you aware of violation\r\n    // of the unique login index, so if this error is sent back in an async\r\n    // callback, then you can just return that error as a single element array\r\n    // containing just that error message, and everyauth will automatically handle\r\n    // that as a failed registration. Again, you will have access to this error via\r\n    // the `errors` local in your register view jade template.\r\n    // e.g.,\r\n    // var promise = this.Promise();\r\n    // User.create(newUserAttributes, function (err, user) {\r\n    //   if (err) return promise.fulfill([err]);\r\n    //   promise.fulfill(user);\r\n    // });\r\n    // return promise;\r\n    //\r\n    // Note: Index and db-driven validations are the only validations that occur \r\n    // here; all other validations occur in the `validateRegistration` step documented above.\r\n  })\r\n  .registerSuccessRedirect('/'); // Where to redirect to after a successful registration\r\n\r\nvar routes = function (app) {\r\n  // Define your routes here\r\n};\r\n\r\nconnect(\r\n    connect.bodyParser()\r\n  , connect.cookieParser()\r\n  , connect.session({secret: 'whodunnit'})\r\n  , everyauth.middleware()\r\n  , connect.router(routes);\r\n).listen(3000);\r\n```\r\n\r\nYou can also configure more parameters (most are set to defaults) via\r\nthe same chainable API:\r\n\r\n```javascript\r\neveryauth.password\r\n  .loginFormFieldName('login')       // Defaults to 'login'\r\n  .passwordFormFieldName('password') // Defaults to 'password'\r\n  .loginLayout('custom_login_layout') // Only with `express`\r\n  .registerLayout('custom reg_layout') // Only with `express`\r\n  .loginLocals(fn);                    // See Recipe 3 below\r\n```\r\n\r\nIf you want to see what the current value of a\r\nconfigured parameter is, you can do so via:\r\n\r\n```javascript\r\neveryauth.password.loginFormFieldName();    // 'login'\r\neveryauth.password.passwordFormFieldName(); // 'password'\r\n```\r\n\r\nTo see all parameters that are configurable, the following will return an\r\nobject whose parameter name keys map to description values:\r\n\r\n```javascript\r\neveryauth.password.configurable();\r\n```\r\n\r\n### Password Recipe 1: Extra registration data\r\n\r\nSometimes your registration will ask for more information from the user besides the login and password.\r\n\r\nFor this particular scenario, you can configure the optional step, `extractExtraRegistrationParams`.\r\n\r\n```javascript\r\neveryauth.password.extractExtraRegistrationParams( function (req) {\r\n  return {\r\n      phone: req.body.phone\r\n    , name: {\r\n          first: req.body.first_name\r\n        , last: req.body.last_name\r\n      }\r\n  };\r\n});\r\n```\r\n\r\nThen, you will have access to this data from within your configured\r\n`validateRegistration` and `registerUser`:\r\n\r\n```javascript\r\neveryauth.password\r\n  .validateRegistration( function (newUserAttributes) {\r\n    var phone = newUserAttributes.phone\r\n      , firstName = newUserAttributes.name.first\r\n      , lastName = newUserAttributes.name.last;\r\n  })\r\n  .registerUser( function (newUserAttributes) {\r\n    var phone = newUserAttributes.phone\r\n      , firstName = newUserAttributes.name.first\r\n      , lastName = newUserAttributes.name.last;\r\n  });\r\n```\r\n\r\n### Password Recipe 2: Logging in with email or phone number\r\n\r\nBy default, `everyauth` uses the field and user key name `login` during the\r\nregistration and login process.\r\n\r\nSometimes, you want to use `email` or `phone` instead of `login`. Moreover,\r\nyou also want to validate `email` and `phone` fields upon registration.\r\n\r\n`everyauth` provides an easy way to do this:\r\n\r\n```javascript\r\neveryauth.password.loginWith('email');\r\n\r\n// OR\r\n\r\neveryauth.password.loginWith('phone');\r\n```\r\n\r\nWith simple login configuration like this, you get email (or phone) validation\r\nin addition to renaming of the form field and user key corresponding to what\r\notherwise would typically be referred to as 'login'.\r\n\r\n### Password Recipe 3: Adding additional view local variables to login and registration views\r\n\r\nIf you are using `express`, you are able to pass variables from your app\r\ncontext to your view context via local variables. `everyauth` provides\r\nseveral convenience local vars for your views, but sometimes you will want\r\nto augment this set of local vars with additional locals.\r\n\r\nSo `everyauth` also provides a mechanism for you to do so via the following\r\nconfigurables:\r\n\r\n```javascript\r\neveryauth.password.loginLocals(...);\r\neveryauth.password.registerLocals(...);\r\n```\r\n\r\n`loginLocals` and `registerLocals` configuration have symmetrical APIs, so I\r\nwill only cover `loginLocals` here to illustrate how to use both.\r\n\r\nYou can configure this parameter in one of *3* ways. Why 3? Because there are 3 types of ways that you can retrieve your locals.\r\n\r\n1. Static local vars that never change values:\r\n   \r\n       ```javascript\r\n       everyauth.password.loginLocals({\r\n         title: 'Login'\r\n       });\r\n       ```\r\n2. Dynamic synchronous local vars that depend on the incoming request, but whose values are retrieved synchronously\r\n   \r\n       ```javascript\r\n       everyauth.password.loginLocals( function (req, res) {\r\n         var sess = req.session;\r\n         return {\r\n           isReturning: sess.isReturning\r\n         };\r\n       });\r\n       ```\r\n3. Dynamic asynchronous local vars\r\n   \r\n       ```javascript\r\n       everyauth.password.loginLocals( function (req, res, done) {\r\n         asyncCall( function ( err, data) {\r\n           if (err) return done(err);\r\n           done(null, {\r\n             title: il8n.titleInLanguage('Login Page', il8n.language(data.geo))\r\n           });\r\n         });\r\n       });\r\n       ```\r\n\r\n### Password Recipe 4: Customize Your Registration Validation\r\n\r\nBy default, `everyauth.password` automatically\r\n\r\n- validates that the login (or email or phone, depending on what you authenticate with -- see Password Recipe 2) is present in the login http request, \r\n- validates that the password is present\r\n- validates that an email login is a correctly formatted email\r\n- validates that a phone login is a valid phone number\r\n\r\nIf any of these validations fail, then the appropriate errors are generated and accessible to you in your view via the `errors` view local variable.\r\n\r\nIf you want to add additional validations beyond this, you can do so by configuring the step, `validateRegistration`:\r\n\r\n```javascript\r\neveryauth.password\r\n  .validateRegistration( function (newUserAttributes, baseErrors) {\r\n    // Here, newUserAttributes is the hash of parameters extracted from the incoming request.\r\n    // baseErrors is the array of errors generated by the default automatic validation outlined above\r\n    //   in this same recipe.\r\n\r\n    // First, validate your errors. Here, validateUser is a made up function\r\n    var moreErrors = validateUser( newUserAttributes );\r\n    if (moreErrors.length) baseErrors.push.apply(baseErrors, moreErrors);\r\n\r\n    // Return the array of errors, so your view has access to them.\r\n    return baseErrors;\r\n  });\r\n```\r\n\r\n### Password Recipe 5: Password Hashing\r\n\r\nBy default, everyauth is agnostic about how you decide to store your users and\r\ntherefore passwords. However, one should *always* use password hashing and\r\nsalting for security.\r\n\r\nHere's an example of how to incorporate password hashing into everyauth using\r\nbcrypt hashing. The idea is to store a salt and hash value inside your user object\r\ninstead of the password. The hash value is generated from the password (sent with a\r\nregistration or login request) and unique salt per user, using the bcrypt algorithm.\r\n\r\n```javascript\r\n// Make sure to `npm install bcrypt`\r\nvar bcrypt = require('bcrypt');\r\n\r\neveryauth.password\r\n  .registerUser( function (newUserAttrs) {\r\n    var promise = this.Promise()\r\n      , password = newUserAttrs.password;\r\n\r\n    delete newUserAttrs[password]; // Don't store password\r\n    newUserAttrs.salt = bcrypt.genSaltSync(10);\r\n    newUserAttrs.hash = bcrypt.hashSync(password, salt);\r\n\r\n    // Create a new user in your data store\r\n    createUser( newUserAttrs, function (err, createdUser) {\r\n      if (err) return promise.fail(err);\r\n      return promise.fulfill(createdUser);\r\n    });\r\n\r\n    return promise;\r\n  })\r\n  .authenticate( function (login, password) {\r\n    var promise\r\n      , errors = [];\r\n    if (!login) errors.push('Missing login.');\r\n    if (!password) errors.push('Missing password.');\r\n    if (errors.length) return errors;\r\n\r\n    promise = this.Promise();\r\n\r\n    // findUser passes an error or user to a callback after finding the\r\n    // user by login\r\n    findUser( login, function (err, user) {\r\n      if (err) {\r\n        errors.push(err.message || err);\r\n        return promise.fulfill(errors);\r\n      }\r\n      if (!user) {\r\n        errors.push('User with login ' + login + ' does not exist.');\r\n        return promise.fulfill(errors);\r\n      }\r\n      bcrypt.compare(password, user.hash, function (err, didSucceed) {\r\n        if (err) {\r\n          return promise.fail(err);\r\n          errors.push('Wrong password.');\r\n          return promise.fulfill(errors);\r\n        }\r\n        if (didSucceed) return promise.fulfill(user);\r\n        errors.push('Wrong password.');\r\n        return promise.fulfill(errors);\r\n      });\r\n    });\r\n\r\n    return promise;\r\n  })\r\n```\r\n\r\n## Other Modules\r\n\r\n### GitHub OAuth\r\n\r\n```javascript\r\nvar everyauth = require('everyauth')\r\n  , connect = require('connect');\r\n\r\neveryauth.github\r\n  .appId('YOUR CLIENT ID HERE')\r\n  .appSecret('YOUR CLIENT SECRET HERE')\r\n  .findOrCreateUser( function (session, accessToken, , accessTokenExtra, githubUserMetadata) {\r\n    // find or create user logic goes here\r\n  })\r\n  .redirectPath('/');\r\n\r\nvar routes = function (app) {\r\n  // Define your routes here\r\n};\r\n\r\nconnect(\r\n    connect.bodyParser()\r\n  , connect.cookieParser()\r\n  , connect.session({secret: 'whodunnit'})\r\n  , everyauth.middleware()\r\n  , connect.router(routes);\r\n).listen(3000);\r\n```\r\n\r\nYou can also configure more parameters (most are set to defaults) via\r\nthe same chainable API:\r\n  \r\n```javascript\r\neveryauth.github\r\n  .entryPath('/auth/github')\r\n  .callbackPath('/auth/github/callback')\r\n  .scope('repo'); // Defaults to undefined\r\n                  // Can be set to a combination of: 'user', 'public_repo', 'repo', 'gist'\r\n                  // For more details, see http://develop.github.com/p/oauth.html\r\n```\r\n\r\nIf you want to see what the current value of a\r\nconfigured parameter is, you can do so via:\r\n\r\n```javascript\r\neveryauth.github.scope(); // undefined\r\neveryauth.github.entryPath(); // '/auth/github'\r\n```\r\n\r\nTo see all parameters that are configurable, the following will return an\r\nobject whose parameter name keys map to description values:\r\n\r\n```javascript\r\neveryauth.github.configurable();\r\n```\r\n\r\n### Instagram OAuth\r\n\r\n```javascript\r\nvar everyauth = require('everyauth')\r\n  , connect = require('connect');\r\n\r\neveryauth.instagram\r\n  .appId('YOUR CLIENT ID HERE')\r\n  .appSecret('YOUR CLIENT SECRET HERE')\r\n  .findOrCreateUser( function (session, accessToken, accessTokenExtra, instagramUserMetadata) {\r\n    // find or create user logic goes here\r\n  })\r\n  .redirectPath('/');\r\n\r\nvar routes = function (app) {\r\n  // Define your routes here\r\n};\r\n\r\nconnect(\r\n    connect.bodyParser()\r\n  , connect.cookieParser()\r\n  , connect.session({secret: 'whodunnit'})\r\n  , everyauth.middleware()\r\n  , connect.router(routes);\r\n).listen(3000);\r\n```\r\n\r\nYou can also configure more parameters (most are set to defaults) via\r\nthe same chainable API:\r\n\r\n```javascript\r\neveryauth.instagram\r\n  .entryPath('/auth/instagram')\r\n  .callbackPath('/auth/instagram/callback')\r\n  .scope('basic') // Defaults to 'basic'\r\n                  // Can be set to a combination of: 'basic', 'comments', 'relationships', 'likes'\r\n                  // For more details, see http://instagram.com/developer/auth/#scope\r\n  .display(undefined); // Defaults to undefined; Set to 'touch' to see a mobile optimized version\r\n                       // of the instagram auth page\r\n```\r\n\r\nIf you want to see what the current value of a\r\nconfigured parameter is, you can do so via:\r\n\r\n```javascript\r\neveryauth.instagram.callbackPath(); // '/auth/instagram/callback'\r\neveryauth.instagram.entryPath(); // '/auth/instagram'\r\n```\r\n\r\nTo see all parameters that are configurable, the following will return an\r\nobject whose parameter name keys map to description values:\r\n\r\n```javascript\r\neveryauth.instagram.configurable();\r\n```\r\n\r\n### Foursquare OAuth\r\n\r\n```javascript\r\nvar everyauth = require('everyauth')\r\n  , connect = require('connect');\r\n\r\neveryauth.foursquare\r\n  .appId('YOUR CLIENT ID HERE')\r\n  .appSecret('YOUR CLIENT SECRET HERE')\r\n  .findOrCreateUser( function (session, accessToken, accessTokenExtra, foursquareUserMetadata) {\r\n    // find or create user logic goes here\r\n  })\r\n  .redirectPath('/');\r\n\r\nvar routes = function (app) {\r\n  // Define your routes here\r\n};\r\n\r\nconnect(\r\n    connect.bodyParser()\r\n  , connect.cookieParser()\r\n  , connect.session({secret: 'whodunnit'})\r\n  , everyauth.middleware()\r\n  , connect.router(routes);\r\n).listen(3000);\r\n```\r\n\r\nYou can also configure more parameters (most are set to defaults) via\r\nthe same chainable API:\r\n\r\n```javascript\r\neveryauth.foursquare\r\n  .entryPath('/auth/foursquare')\r\n  .callbackPath('/auth/foursquare/callback');\r\n```\r\n\r\nIf you want to see what the current value of a\r\nconfigured parameter is, you can do so via:\r\n\r\n```javascript\r\neveryauth.foursquare.callbackPath(); // '/auth/foursquare/callback'\r\neveryauth.foursquare.entryPath(); // '/auth/foursquare'\r\n```\r\n\r\nTo see all parameters that are configurable, the following will return an\r\nobject whose parameter name keys map to description values:\r\n\r\n```javascript\r\neveryauth.foursquare.configurable();\r\n```\r\n\r\n### LinkedIn OAuth\r\n\r\n```javascript\r\nvar everyauth = require('everyauth')\r\n  , connect = require('connect');\r\n\r\neveryauth.linkedin\r\n  .consumerKey('YOUR CONSUMER ID HERE')\r\n  .consumerSecret('YOUR CONSUMER SECRET HERE')\r\n  .findOrCreateUser( function (session, accessToken, accessTokenSecret, linkedinUserMetadata) {\r\n    // find or create user logic goes here\r\n  })\r\n  .redirectPath('/');\r\n\r\nvar routes = function (app) {\r\n  // Define your routes here\r\n};\r\n\r\nconnect(\r\n    connect.bodyParser()\r\n  , connect.cookieParser()\r\n  , connect.session({secret: 'whodunnit'})\r\n  , everyauth.middleware()\r\n  , connect.router(routes);\r\n).listen(3000);\r\n```\r\n\r\nYou can also configure more parameters (most are set to defaults) via\r\nthe same chainable API:\r\n\r\n```javascript\r\neveryauth.linkedin\r\n  .entryPath('/auth/linkedin')\r\n  .callbackPath('/auth/linkedin/callback');\r\n```\r\n\r\nIf you want to see what the current value of a\r\nconfigured parameter is, you can do so via:\r\n\r\n```javascript\r\neveryauth.linkedin.callbackPath(); // '/auth/linkedin/callback'\r\neveryauth.linkedin.entryPath(); // '/auth/linkedin'\r\n```\r\n\r\nTo see all parameters that are configurable, the following will return an\r\nobject whose parameter name keys map to description values:\r\n\r\n```javascript\r\neveryauth.linkedin.configurable();\r\n```\r\n\r\n### Google OAuth2\r\n\r\n```javascript\r\nvar everyauth = require('everyauth')\r\n  , connect = require('connect');\r\n\r\neveryauth.google\r\n  .appId('YOUR CLIENT ID HERE')\r\n  .appSecret('YOUR CLIENT SECRET HERE')\r\n  .scope('https://www.google.com/m8/feeds') // What you want access to\r\n  .handleAuthCallbackError( function (req, res) {\r\n    // If a user denies your app, Google will redirect the user to\r\n    // /auth/facebook/callback?error=access_denied\r\n    // This configurable route handler defines how you want to respond to\r\n    // that.\r\n    // If you do not configure this, everyauth renders a default fallback\r\n    // view notifying the user that their authentication failed and why.\r\n  })\r\n  .findOrCreateUser( function (session, accessToken, accessTokenExtra, googleUserMetadata) {\r\n    // find or create user logic goes here\r\n    // Return a user or Promise that promises a user\r\n    // Promises are created via\r\n    //     var promise = this.Promise();\r\n  })\r\n  .redirectPath('/');\r\n\r\nvar routes = function (app) {\r\n  // Define your routes here\r\n};\r\n\r\nconnect(\r\n    connect.bodyParser()\r\n  , connect.cookieParser()\r\n  , connect.session({secret: 'whodunnit'})\r\n  , everyauth.middleware()\r\n  , connect.router(routes);\r\n).listen(3000);\r\n```\r\n\r\nYou can also configure more parameters (most are set to defaults) via\r\nthe same chainable API:\r\n\r\n```javascript\r\neveryauth.google\r\n  .entryPath('/auth/google')\r\n  .callbackPath('/auth/google/callback');\r\n```\r\n\r\nIf you want to see what the current value of a\r\nconfigured parameter is, you can do so via:\r\n\r\n```javascript\r\neveryauth.google.scope(); // undefined\r\neveryauth.google.entryPath(); // '/auth/google'\r\n```\r\n\r\nTo see all parameters that are configurable, the following will return an\r\nobject whose parameter name keys map to description values:\r\n\r\n```javascript\r\neveryauth.google.configurable();\r\n```\r\n\r\n### Gowalla OAuth2\r\n\r\n```javascript\r\nvar everyauth = require('everyauth')\r\n  , connect = require('connect');\r\n\r\neveryauth.gowalla\r\n  .appId('YOUR CLIENT ID HERE')\r\n  .appSecret('YOUR CLIENT SECRET HERE')\r\n  .handleAuthCallbackError( function (req, res) {\r\n    // TODO - Update this documentation\r\n    // This configurable route handler defines how you want to respond to\r\n    // a response from Gowalla that something went wrong during the oauth2 process.\r\n    // If you do not configure this, everyauth renders a default fallback\r\n    // view notifying the user that their authentication failed and why.\r\n  })\r\n  .findOrCreateUser( function (session, accessToken, accessTokenExtra, gowallaUserMetadata) {\r\n    // find or create user logic goes here\r\n    // Return a user or Promise that promises a user\r\n    // Promises are created via\r\n    //     var promise = this.Promise();\r\n  })\r\n  .redirectPath('/');\r\n\r\nvar routes = function (app) {\r\n  // Define your routes here\r\n};\r\n\r\nconnect(\r\n    connect.bodyParser()\r\n  , connect.cookieParser()\r\n  , connect.session({secret: 'whodunnit'})\r\n  , everyauth.middleware()\r\n  , connect.router(routes);\r\n).listen(3000);\r\n```\r\n\r\nYou can also configure more parameters (most are set to defaults) via\r\nthe same chainable API:\r\n\r\n```javascript\r\neveryauth.gowalla\r\n  .entryPath('/auth/gowalla')\r\n  .callbackPath('/auth/gowalla/callback');\r\n```\r\n\r\nIf you want to see what the current value of a\r\nconfigured parameter is, you can do so via:\r\n\r\n```javascript\r\neveryauth.gowalla.scope(); // undefined\r\neveryauth.gowalla.entryPath(); // '/auth/gowalla'\r\n```\r\n\r\nTo see all parameters that are configurable, the following will return an\r\nobject whose parameter name keys map to description values:\r\n\r\n```javascript\r\neveryauth.gowalla.configurable();\r\n```\r\n\r\n### 37signals (Basecamp, Highrise, Backpack, Campfire) OAuth2\r\n\r\nFirst, register an app at [integrate.37signals.com](https://integrate.37signals.com).\r\n\r\n```javascript\r\nvar everyauth = require('everyauth')\r\n  , connect = require('connect');\r\n\r\neveryauth['37signals']\r\n  .appId('YOUR CLIENT ID HERE')\r\n  .appSecret('YOUR CLIENT SECRET HERE')\r\n  .handleAuthCallbackError( function (req, res) {\r\n    // TODO - Update this documentation\r\n    // This configurable route handler defines how you want to respond to\r\n    // a response from 37signals that something went wrong during the oauth2 process.\r\n    // If you do not configure this, everyauth renders a default fallback\r\n    // view notifying the user that their authentication failed and why.\r\n  })\r\n  .findOrCreateUser( function (session, accessToken, accessTokenExtra, _37signalsUserMetadata) {\r\n    // find or create user logic goes here\r\n    // Return a user or Promise that promises a user\r\n    // Promises are created via\r\n    //     var promise = this.Promise();\r\n  })\r\n  .redirectPath('/');\r\n\r\nvar routes = function (app) {\r\n  // Define your routes here\r\n};\r\n\r\nconnect(\r\n    connect.bodyParser()\r\n  , connect.cookieParser()\r\n  , connect.session({secret: 'whodunnit'})\r\n  , everyauth.middleware()\r\n  , connect.router(routes);\r\n).listen(3000);\r\n```\r\n\r\nYou can also configure more parameters (most are set to defaults) via\r\nthe same chainable API:\r\n\r\n```javascript\r\neveryauth['37signals']\r\n  .entryPath('/auth/37signals')\r\n  .callbackPath('/auth/37signals/callback');\r\n```\r\n\r\nIf you want to see what the current value of a\r\nconfigured parameter is, you can do so via:\r\n\r\n```javascript\r\neveryauth['37signals'].entryPath(); // '/auth/37signals'\r\n```\r\n\r\nTo see all parameters that are configurable, the following will return an\r\nobject whose parameter name keys map to description values:\r\n\r\n```javascript\r\neveryauth['37signals'].configurable();\r\n```\r\n\r\n### AngelList OAuth2\r\n\r\nFirst, register an app [on AngelList](http://angel.co/api/oauth/clients).\r\n\r\n```javascript\r\nvar everyauth = require('everyauth')\r\n  , connect = require('connect');\r\n\r\neveryauth.angellist\r\n  .appId('YOUR CLIENT ID HERE')\r\n  .appSecret('YOUR TOKEN HERE')\r\n  .findOrCreateUser( function (session, accessToken, accessTokenExtra, angelListUserMetadata) {\r\n    // find or create user logic goes here\r\n    // Return a user or Promise that promises a user\r\n    // Promises are created via\r\n    //     var promise = this.Promise();\r\n  })\r\n  .redirectPath('/');\r\n\r\nvar routes = function (app) {\r\n  // Define your routes here\r\n};\r\n\r\nconnect(\r\n    connect.bodyParser()\r\n  , connect.cookieParser()\r\n  , connect.session({secret: 'whodunnit'})\r\n  , everyauth.middleware()\r\n  , connect.router(routes);\r\n).listen(3000);\r\n```\r\n\r\nYou can also configure more parameters (most are set to defaults) via\r\nthe same chainable API:\r\n\r\n```javascript\r\neveryauth.angellist\r\n  .entryPath('/auth/angellist')\r\n  .callbackPath('/auth/angellist/callback');\r\n```\r\n\r\nIf you want to see what the current value of a\r\nconfigured parameter is, you can do so via:\r\n\r\n```javascript\r\neveryauth.angellist.entryPath(); // '/auth/angellist'\r\n```\r\n\r\nTo see all parameters that are configurable, the following will return an\r\nobject whose parameter name keys map to description values:\r\n\r\n```javascript\r\neveryauth.angellist.configurable();\r\n```\r\n\r\n### Dwolla OAuth2\r\n\r\nFirst, register an app [on Dwolla](http://www.dwolla.com/developers).\r\n\r\n```javascript\r\nvar everyauth = require('everyauth')\r\n  , connect = require('connect');\r\n\r\neveryauth.dwolla\r\n  .appId('YOUR CLIENT ID HERE')\r\n  .appSecret('YOUR TOKEN HERE')\r\n  .scope('accountinfofull')\r\n  .findOrCreateUser( function (session, accessToken, accessTokenExtra, dwollaUserMetadata) {\r\n    // find or create user logic goes here\r\n    // Return a user or Promise that promises a user\r\n    // Promises are created via\r\n    //     var promise = this.Promise();\r\n  })\r\n  .redirectPath('/');\r\n\r\nvar routes = function (app) {\r\n  // Define your routes here\r\n};\r\n```\r\n\r\n### Skyrock OAuth\r\n\r\nFirst, register an app [on Skyrock](http://www.skyrock.com/developer/).\r\n\r\n```javascript\r\nvar everyauth = require('everyauth')\r\n  , connect = require('connect');\r\n\r\neveryauth.skyrock\r\n  .consumerKey('YOUR CONSUMER KEY HERE')\r\n  .consumerSecret('YOUR CONSUMER SECRET HERE')\r\n  .findOrCreateUser( function (session, accessToken, accessTokenExtra, skyrockUserMetadata) {\r\n    // find or create user logic goes here\r\n    // Return a user or Promise that promises a user\r\n    // Promises are created via\r\n    //     var promise = this.Promise();\r\n  })\r\n  .redirectPath('/');\r\n\r\nvar routes = function (app) {\r\n  // Define your routes here\r\n};\r\n\r\nconnect(\r\n    connect.bodyParser()\r\n  , connect.cookieParser()\r\n  , connect.session({secret: 'whodunnit'})\r\n  , everyauth.middleware()\r\n  , connect.router(routes);\r\n).listen(3000);\r\n```\r\n\r\n### VKontakte OAuth2\r\n\r\nFirst, register an app [on VKontakte](http://vk.com/editapp?act=create&site=1).\r\n\r\n```javascript\r\nvar everyauth = require('everyauth')\r\n  , connect = require('connect');\r\n\r\neveryauth.vkontakte\r\n  .appId('YOUR APP ID HERE')\r\n  .appSecret('YOUR TOKEN HERE')\r\n  .scope('photo')\r\n  .findOrCreateUser( function (session, accessToken, accessTokenExtra, vkUserMetadata) {\r\n    // find or create user logic goes here\r\n    // Return a user or Promise that promises a user\r\n    // Promises are created via\r\n    //     var promise = this.Promise();\r\n  })\r\n  .redirectPath('/');\r\n\r\nvar routes = function (app) {\r\n  // Define your routes here\r\n};\r\n\r\nconnect(\r\n    connect.bodyParser()\r\n  , connect.cookieParser()\r\n  , connect.session({secret: 'whodunnit'})\r\n  , everyauth.middleware()\r\n  , connect.router(routes);\r\n).listen(3000);\r\n```\r\n\r\n### Mail.ru OAuth2\r\n\r\nFirst, register an app [on mail.ru](http://api.mail.ru/apps/my/add/).\r\n\r\n```javascript\r\nvar everyauth = require('everyauth')\r\n  , connect = require('connect');\r\n\r\neveryauth.mailru\r\n    .appId('YOUR CONSUMER KEY HERE')\r\n    .appSecret('YOUR CONSUMER SECRET HERE')\r\n    .scope('messages')\r\n    .entryPath('/auth/mailru')\r\n    .callbackPath('/auth/mailru/callback')\r\n    .findOrCreateUser( function (session, accessToken, accessTokenExtra, mailruUser)  {\r\n          // find or create user logic goes here\r\n          // Return a user or Promise that promises a user\r\n          // Promises are created via\r\n          // var promise = this.Promise();\r\n          // return promise;\r\n    })\r\n    .redirectPath('/');\r\n\r\nvar routes = function (app) {\r\n  // Define your routes here\r\n};\r\n\r\nconnect(\r\n    connect.bodyParser()\r\n  , connect.cookieParser()\r\n  , connect.session({secret: 'whodunnit'})\r\n  , everyauth.middleware()\r\n  , connect.router(routes);\r\n).listen(3000);\r\n```\r\n\r\n### Yahoo OAuth\r\n\r\n```javascript\r\nvar everyauth = require('everyauth')\r\n  , connect = require('connect');\r\n\r\neveryauth.yahoo\r\n  .consumerKey('YOUR CONSUMER KEY HERE')\r\n  .consumerSecret('YOUR CONSUMER SECRET HERE')\r\n  .findOrCreateUser( function (session, accessToken, accessTokenSecret, yahooUserMetadata) {\r\n    // find or create user logic goes here\r\n  })\r\n  .redirectPath('/');\r\n\r\nvar routes = function (app) {\r\n  // Define your routes here\r\n};\r\n\r\nconnect(\r\n    connect.bodyParser()\r\n  , connect.cookieParser()\r\n  , connect.session({secret: 'whodunnit'})\r\n  , everyauth.middleware()\r\n  , connect.router(routes);\r\n).listen(3000);\r\n```\r\n\r\nYou can also configure more parameters (most are set to defaults) via\r\nthe same chainable API:\r\n\r\n```javascript\r\neveryauth.yahoo\r\n  .entryPath('/auth/yahoo')\r\n  .callbackPath('/auth/yahoo/callback');\r\n```\r\n\r\nIf you want to see what the current value of a\r\nconfigured parameter is, you can do so via:\r\n\r\n```javascript\r\neveryauth.yahoo.callbackPath(); // '/auth/yahoo/callback'\r\neveryauth.yahoo.entryPath(); // '/auth/yahoo'\r\n```\r\n\r\nTo see all parameters that are configurable, the following will return an\r\nobject whose parameter name keys map to description values:\r\n\r\n```javascript\r\neveryauth.yahoo.configurable();\r\n```\r\n\r\n### Readability OAuth\r\n\r\n```javascript\r\nvar everyauth = require('everyauth')\r\n  , connect = require('connect');\r\n\r\neveryauth.readability\r\n  .consumerKey('YOUR CONSUMER KEY HERE')\r\n  .consumerSecret('YOUR CONSUMER SECRET HERE')\r\n  .findOrCreateUser( function (sess, accessToken, accessSecret, reader) {\r\n    // find or create user logic goes here\r\n    //\r\n    // e.g.,\r\n    // return usersByReadabilityId[reader.username] || (usersByReadabilityId[reader.username] = reader);\r\n  })\r\n  .redirectPath('/');\r\n\r\nvar routes = function (app) {\r\n  // Define your routes here\r\n};\r\n\r\nconnect(\r\n    connect.bodyParser()\r\n  , connect.cookieParser()\r\n  , connect.session({secret: 'whodunnit'})\r\n  , everyauth.middleware()\r\n  , connect.router(routes);\r\n).listen(3000);\r\n```\r\n\r\nYou can also configure more parameters (most are set to defaults) via\r\nthe same chainable API:\r\n\r\n```javascript\r\neveryauth.readability\r\n  .entryPath('/auth/readability')\r\n  .callbackPath('/auth/readability/callback');\r\n```\r\n\r\nIf you want to see what the current value of a\r\nconfigured parameter is, you can do so via:\r\n\r\n```javascript\r\neveryauth.readability.callbackPath(); // '/auth/readability/callback'\r\neveryauth.readability.entryPath(); // '/auth/readability'\r\n```\r\n\r\nTo see all parameters that are configurable, the following will return an\r\nobject whose parameter name keys map to description values:\r\n\r\n```javascript\r\neveryauth.readability.configurable();\r\n```\r\n\r\n### Dropbox OAuth\r\n\r\n```javascript\r\nvar everyauth = require('everyauth')\r\n  , connect = require('connect');\r\n\r\neveryauth.dropbox\r\n  .consumerKey('YOUR CONSUMER KEY HERE')\r\n  .consumerSecret('YOUR CONSUMER SECRET HERE')\r\n  .findOrCreateUser( function (sess, accessToken, accessSecret, user) {\r\n    // find or create user logic goes here\r\n    //\r\n    // e.g.,\r\n    // return usersByDropboxId[user.uid] || (usersByDropboxId[user.uid] = user);\r\n  })\r\n  .redirectPath('/');\r\n\r\nvar routes = function (app) {\r\n  // Define your routes here\r\n};\r\n\r\nconnect(\r\n    connect.bodyParser()\r\n  , connect.cookieParser()\r\n  , connect.session({secret: 'whodunnit'})\r\n  , everyauth.middleware()\r\n  , connect.router(routes);\r\n).listen(3000);\r\n```\r\n\r\nYou can also configure more parameters (most are set to defaults) via\r\nthe same chainable API:\r\n\r\n```javascript\r\neveryauth.dropbox\r\n  .entryPath('/auth/dropbox')\r\n  .callbackPath('/auth/dropbox/callback');\r\n```\r\n\r\nIf you want to see what the current value of a\r\nconfigured parameter is, you can do so via:\r\n\r\n```javascript\r\neveryauth.dropbox.callbackPath(); // '/auth/dropbox/callback'\r\neveryauth.dropbox.entryPath(); // '/auth/dropbox'\r\n```\r\n\r\nTo see all parameters that are configurable, the following will return an\r\nobject whose parameter name keys map to description values:\r\n\r\n```javascript\r\neveryauth.dropbox.configurable();\r\n```\r\n\r\n### Justin.tv OAuth\r\n\r\n[Sign up for a Justin.tv account](http://www.justin.tv/user/signup) and activate it as a [developer account](http://www.justin.tv/developer/activate) to get your consumer key and secret.\r\n\r\n```javascript\r\nvar everyauth = require('everyauth')\r\n  , connect = require('connect');\r\n  \r\neveryauth.justintv\r\n  .consumerKey('YOUR CONSUMER KEY HERE')\r\n  .consumerSecret('YOUR CONSUMER SECRET HERE')\r\n  .findOrCreateUser( function (sess, accessToken, accessSecret, justintvUser) {\r\n    // find or create user logic goes here\r\n    //\r\n    // e.g.,\r\n    // return usersByJustintvId[justintvUser.id] || (usersByJustintvId[justintvUser.id] = justintvUser);\r\n  })\r\n  .redirectPath('/');\r\n  \r\nvar routes = function (app) {\r\n  // Define your routes here\r\n};\r\n\r\nconnect(\r\n    connect.bodyParser()\r\n  , connect.cookieParser()\r\n  , connect.session({secret: 'whodunnit'})\r\n  , everyauth.middleware()\r\n  , connect.router(routes);\r\n).listen(3000);\r\n```\r\n\r\nThe `justintvUser` parameter in the `.findOrCreateUser()` function above returns the `account/whoami` API call\r\n\r\n[Justin.tv API Wiki - Account/whoami](http://apiwiki.justin.tv/mediawiki/index.php/Account/whoami)\r\n\r\n```javascript\r\n{\r\n   \"image_url_huge\": \"http:\\/\\/static-cdn.justin.tv\\/jtv_user_pictures\\/justin-320x240-4.jpg\",\r\n   \"profile_header_border_color\": null,\r\n   \"favorite_quotes\": \"I love Justin.tv\",\r\n   \"sex\": \"Male\",\r\n   \"image_url_large\": \"http:\\/\\/static-cdn.justin.tv\\/jtv_user_pictures\\/justin-125x94-4.jpg\",\r\n   \"profile_about\": \"Check out my website:\\n\\nwww.justin.tv\\n\",\r\n   \"profile_background_color\": null,\r\n   \"image_url_medium\": \"http:\\/\\/static-cdn.justin.tv\\/jtv_user_pictures\\/justin-75x56-4.jpg\",\r\n   \"id\": 1698,\r\n   \"broadcaster\": true,\r\n   \"profile_url\": \"http:\\/\\/www.justin.tv\\/justin\\/profile\",\r\n   \"profile_link_color\": null,\r\n   \"image_url_small\": \"http:\\/\\/static-cdn.justin.tv\\/jtv_user_pictures\\/justin-50x37-4.jpg\",\r\n   \"profile_header_text_color\": null,\r\n   \"name\": \"The JUST UN\",\r\n   \"image_url_tiny\": \"http:\\/\\/static-cdn.justin.tv\\/jtv_user_pictures\\/justin-33x25-4.jpg\",\r\n   \"login\": \"justin\",\r\n   \"profile_header_bg_color\": null,\r\n   \"location\": \"San Francisco\"\r\n}\r\n```\r\n\r\nYou can also configure more parameters (most are set to defaults) via the same chainable API:\r\n\r\n```javascript\r\neveryauth.justintv\r\n  .entryPath('/auth/justintv')\r\n  .callbackPath('/auth/justintv/callback');\r\n```\r\n\r\nIf you want to see what the current value of a configured parameter is, you can do so via:\r\n\r\n```javascript\r\neveryauth.justintv.callbackPath(); // '/auth/justintv/callback'\r\neveryauth.justintv.entryPath(); // '/auth/justintv'\r\n```\r\n\r\nTo see all parameters that are configurable, the following will return an object whose parameter name keys map to description values:\r\n\r\n```javascript\r\neveryauth.justintv.configurable();\r\n```\r\n\r\n### Vimeo OAuth\r\n\r\nYou will first need to sign up for a [developer application](http://vimeo.com/api/applications) to get the consumer key and secret.\r\n\r\n```javascript\r\nvar everyauth = require('everyauth')\r\n  , connect = require('connect');\r\n\r\neveryauth.vimeo\r\n  .consumerKey('YOUR CONSUMER KEY HERE')\r\n  .consumerSecret('YOUR CONSUMER SECRET HERE')\r\n  .findOrCreateUser( function (sess, accessToken, accessSecret, user) {\r\n    // find or create user logic goes here\r\n    //\r\n    // e.g.,\r\n    // return usersByVimeoId[user.id] || (usersByVimeoId[user.id] = user);\r\n  })\r\n  .redirectPath('/');\r\n\r\nvar routes = function (app) {\r\n  // Define your routes here\r\n};\r\n\r\nconnect(\r\n    connect.bodyParser()\r\n  , connect.cookieParser()\r\n  , connect.session({secret: 'whodunnit'})\r\n  , everyauth.middleware()\r\n  , connect.router(routes);\r\n).listen(3000);\r\n```\r\n\r\nYou can also configure more parameters (most are set to defaults) via\r\nthe same chainable API:\r\n\r\n```javascript\r\neveryauth.vimeo\r\n  .entryPath('/auth/vimeo')\r\n  .callbackPath('/auth/vimeo/callback');\r\n```\r\n\r\nIf you want to see what the current value of a\r\nconfigured parameter is, you can do so via:\r\n\r\n```javascript\r\neveryauth.vimeo.callbackPath(); // '/auth/vimeo/callback'\r\neveryauth.vimeo.entryPath(); // '/auth/vimeo'\r\n```\r\n\r\nTo see all parameters that are configurable, the following will return an\r\nobject whose parameter name keys map to description values:\r\n\r\n```javascript\r\neveryauth.vimeo.configurable();\r\n```\r\n\r\n### Tumblr OAuth (1.a)\r\n\r\nYou will first need to [register an app](http://www.tumblr.com/oauth/register) to get the consumer key and secret.\r\nDuring registration of your new app, enter a \"Default callback URL\" of \"http://<hostname>:<port>/auth/tumblr/callback\".\r\nOnce you register your app, copy down your \"OAuth Consumer Key\" and \"Secret Key\" and proceed below.\r\n\r\n```javascript\r\nvar everyauth = require('everyauth')\r\n  , connect = require('connect');\r\n\r\neveryauth.tumblr\r\n  .consumerKey('YOUR CONSUMER KEY HERE')\r\n  .consumerSecret('YOUR CONSUMER SECRET HERE')\r\n  .findOrCreateUser( function (sess, accessToken, accessSecret, user) {\r\n    // find or create user logic goes here\r\n    //\r\n    // e.g.,\r\n    // return usersByTumblrName[user.name] || (usersByTumblrName[user.name] = user);\r\n  })\r\n  .redirectPath('/');\r\n\r\nvar routes = function (app) {\r\n  // Define your routes here\r\n};\r\n\r\nconnect(\r\n    connect.bodyParser()\r\n  , connect.cookieParser()\r\n  , connect.session({secret: 'whodunnit'})\r\n  , everyauth.middleware()\r\n  , connect.router(routes);\r\n).listen(3000);\r\n```\r\n\r\nYou can also configure more parameters (most are set to defaults) via\r\nthe same chainable API:\r\n\r\n```javascript\r\neveryauth.tumblr\r\n  .entryPath('/auth/tumblr')\r\n  .callbackPath('/auth/tumblr/callback');\r\n```\r\n\r\nIf you want to see what the current value of a\r\nconfigured parameter is, you can do so via:\r\n\r\n```javascript\r\neveryauth.tumblr.callbackPath(); // '/auth/tumblr/callback'\r\neveryauth.tumblr.entryPath(); // '/auth/tumblr'\r\n```\r\n\r\nTo see all parameters that are configurable, the following will return an\r\nobject whose parameter name keys map to description values:\r\n\r\n```javascript\r\neveryauth.tumblr.configurable();\r\n```\r\n\r\n### Evernote OAuth (1.a)\r\n\r\nYou will first need to [request an API key](http://www.evernote.com/about/developer/api/#key) to get the consumer key and secret.  Note that this consumer key and secret will only be valid for the sandbox rather than the production OAuth host.  By default the Evernote module will use the production host, so you'll need to override this using the chainable API if you're using the sandbox.\r\n\r\n```javascript\r\nvar everyauth = require('everyauth')\r\n  , connect = require('connect');\r\n\r\neveryauth.evernote\r\n  .consumerKey('YOUR CONSUMER KEY HERE')\r\n  .consumerSecret('YOUR CONSUMER SECRET HERE')\r\n  .findOrCreateUser( function (sess, accessToken, accessSecret, user) {\r\n    // find or create user logic goes here\r\n    //\r\n    // e.g.,\r\n    // return usersByEvernoteId[user.userId] || (usersByEvernoteId[user.userId] = user);\r\n  })\r\n  .redirectPath('/');\r\n\r\nvar routes = function (app) {\r\n  // Define your routes here\r\n};\r\n\r\nconnect(\r\n    connect.bodyParser()\r\n  , connect.cookieParser()\r\n  , connect.session({secret: 'whodunnit'})\r\n  , everyauth.middleware()\r\n  , connect.router(routes);\r\n).listen(3000);\r\n```\r\n\r\nYou can also configure more parameters (most are set to defaults) via\r\nthe same chainable API:\r\n\r\n```javascript\r\neveryauth.evernote\r\n  .oauthHost('https://sandbox.evernote.com')\r\n  .entryPath('/auth/evernote')\r\n  .callbackPath('/auth/evernote/callback');\r\n```\r\n\r\nIf you want to see what the current value of a\r\nconfigured parameter is, you can do so via:\r\n\r\n```javascript\r\neveryauth.evernote.oauthHost(); // 'https://sandbox.evernote.com'\r\neveryauth.evernote.callbackPath(); // '/auth/evernote/callback'\r\neveryauth.evernote.entryPath(); // '/auth/evernote'\r\n```\r\n\r\nTo see all parameters that are configurable, the following will return an\r\nobject whose parameter name keys map to description values:\r\n\r\n```javascript\r\neveryauth.evernote.configurable();\r\n```\r\n\r\n### OpenStreetMap OAuth\r\n\r\nYou will first need to [login to OpenStreetMap](http://www.openstreetmap.org). Then register you application on your OpenStreetMap user page via the View my OAuth details link on the bottom of the page to get the consumer key and secret. The registered application does not need any permission listed there to login via OAuth.\r\n\r\n```javascript\r\nvar everyauth = require('osm')\r\n  , connect = require('connect');\r\n\r\neveryauth.osm\r\n  .consumerKey('YOUR CONSUMER KEY HERE')\r\n  .consumerSecret('YOUR CONSUMER SECRET HERE')\r\n  .findOrCreateUser( function (sess, accessToken, accessSecret, user) {\r\n    // find or create user logic goes here\r\n    //\r\n    // e.g.,\r\n    // return usersByOSMId[user.id] || (usersByOSMId[user.id] = user);\r\n  })\r\n  .redirectPath('/');\r\n\r\nvar routes = function (app) {\r\n  // Define your routes here\r\n};\r\n\r\nconnect(\r\n    connect.bodyParser()\r\n  , connect.cookieParser()\r\n  , connect.session({secret: 'whodunnit'})\r\n  , everyauth.middleware()\r\n  , connect.router(routes);\r\n).listen(3000);\r\n```\r\n\r\nYou can also configure more parameters (most are set to defaults) via\r\nthe same chainable API:\r\n\r\n```javascript\r\neveryauth.osm\r\n  .oauthHost('http://api06.dev.openstreetmap.org')\r\n  .entryPath('/auth/osm')\r\n  .callbackPath('/auth/osm/callback');\r\n```\r\n\r\nIf you want to see what the current value of a\r\nconfigured parameter is, you can do so via:\r\n\r\n```javascript\r\neveryauth.osm.oauthHost(); // 'http://api.openstreetmap.org'\r\neveryauth.osm.callbackPath(); // '/auth/osm/callback'\r\neveryauth.osm.entryPath(); // '/auth/osm'\r\n```\r\n\r\nTo see all parameters that are configurable, the following will return an\r\nobject whose parameter name keys map to description values:\r\n\r\n```javascript\r\neveryauth.osm.configurable();\r\n```\r\n\r\n### TripIt OAuth (1.0)\r\n\r\nObtain consumer key and consumer secret for your app by [registering it](http://www.tripit.com/developer/create).\r\nPlease note that TripIt is using _API Key_ and _API Secret_ terminology: use those values as describe below.\r\n\r\n```javascript\r\nvar everyauth = require('everyauth')\r\n  , connect = require('connect');\r\n\r\neveryauth.tripit\r\n  .consumerKey('YOUR API KEY')\r\n  .consumerSecret('YOUR API SECRET')\r\n  .findOrCreateUser( function (sess, accessToken, accessSecret, tripitProfile) {\r\n    // find or create user logic goes here\r\n  })\r\n  .redirectPath('/');\r\n\r\nvar routes = function (app) {\r\n  // Define your routes here\r\n};\r\n\r\nconnect(\r\n    connect.bodyParser()\r\n  , connect.cookieParser()\r\n  , connect.session({secret: 'whodunnit'})\r\n  , everyauth.middleware()\r\n  , connect.router(routes);\r\n).listen(3000);\r\n```\r\n\r\n### 500px OAuth (1.0)\r\n\r\nYou will first need to [request an API key](http://developer.500px.com/oauth_clients/new) to get the consumer key and secret.\r\n\r\n```javascript\r\nvar everyauth = require('everyauth')\r\n  , connect = require('connect');\r\n\r\neveryauth['500px']\r\n  .consumerKey('YOUR CONSUMER KEY HERE')\r\n  .consumerSecret('YOUR CONSUMER SECRET HERE')\r\n  .findOrCreateUser( function (sess, accessToken, accessSecret, user) {\r\n    // find or create user logic goes here\r\n    //\r\n    // e.g.,\r\n    // return usersBy500pxId[user.userId] || (usersBy500pxId[user.userId] = user);\r\n  })\r\n  .redirectPath('/');\r\n\r\nvar routes = function (app) {\r\n  // Define your routes here\r\n};\r\n\r\nconnect(\r\n    connect.bodyParser()\r\n  , connect.cookieParser()\r\n  , connect.session({secret: 'whodunnit'})\r\n  , everyauth.middleware()\r\n  , connect.router(routes);\r\n).listen(3000);\r\n```\r\n\r\n### SoundCloud OAuth2\r\n\r\nYou will first need to [register an app](http://soundcloud.com/you/apps) to get the client id and secret.\r\nDuring registration of your new app, enter a \"Default callback URL\" of \"http://<hostname>:<port>/auth/soundcloud/callback\".\r\nOnce you register your app, copy down your \"Client ID\" and \"Client Secret\" and proceed below.\r\n\r\n```javascript\r\nvar everyauth = require('everyauth')\r\n  , connect = require('connect');\r\n\r\neveryauth.soundcloud\r\n  .appId('YOUR CLIENT ID HERE')\r\n  .appSecret('YOUR CLIENT SECRET HERE')\r\n  .handleAuthCallbackError( function (req, res) {\r\n    // TODO - Update this documentation\r\n    // This configurable route handler defines how you want to respond to\r\n    // a response from SoundCloud that something went wrong during the oauth2 process.\r\n    // If you do not configure this, everyauth renders a default fallback\r\n    // view notifying the user that their authentication failed and why.\r\n  })\r\n  .findOrCreateUser( function (session, accessToken, accessTokenExtra, soundcloudUserMetadata) {\r\n    // find or create user logic goes here\r\n    // Return a user or Promise that promises a user\r\n    // Promises are created via\r\n    //     var promise = this.Promise();\r\n  })\r\n  .redirectPath('/');\r\n\r\nvar routes = function (app) {\r\n  // Define your routes here\r\n};\r\n\r\nconnect(\r\n    connect.bodyParser()\r\n  , connect.cookieParser()\r\n  , connect.session({secret: 'whodunnit'})\r\n  , everyauth.middleware()\r\n  , connect.router(routes);\r\n).listen(3000);\r\n```\r\n\r\nYou can also configure more parameters (most are set to defaults) via\r\nthe same chainable API:\r\n\r\n```javascript\r\neveryauth.soundcloud\r\n  .entryPath('/auth/soundcloud')\r\n  .callbackPath('/auth/soundcloud/callback');\r\n```\r\n\r\nIf you want to see what the current value of a\r\nconfigured parameter is, you can do so via:\r\n\r\n```javascript\r\neveryauth.soundcloud.scope(); // undefined\r\neveryauth.soundcloud.display(); // undefined\r\neveryauth.soundcloud.entryPath(); // '/auth/soundcloud'\r\n```\r\n\r\nTo see all parameters that are configurable, the following will return an\r\nobject whose parameter name keys map to description values:\r\n\r\n```javascript\r\neveryauth.soundcloud.configurable();\r\n```\r\n\r\n### mixi OAuth2\r\n\r\nFirst, register an app [on mixi](http://developer.mixi.co.jp).\r\n\r\n```javascript\r\nvar everyauth = require('everyauth')\r\n  , connect = require('connect');\r\n\r\neveryauth.mixi\r\n  .appId('YOUR CONSUMER KEY HERE')\r\n  .appSecret('YOUR CONSUMER SECRET HERE')\r\n  .display('pc') //specify device types of access: See http://developers.mixi.co.jp/\r\n  .scope('r_profile') //specify types of access: See http://developers.mixi.co.jp/\r\n  .findOrCreateUser( function (session, accessToken, accessTokenExtra, mixiUserMetadata) {\r\n    // find or create user logic goes here\r\n    // Return a user or Promise that promises a user\r\n    // Promises are created via\r\n    //     var promise = this.Promise();\r\n  })\r\n  .redirectPath('/');\r\n\r\nvar routes = function (app) {\r\n  // Define your routes here\r\n};\r\n```\r\n\r\n### Mailchimp OAuth2\r\n\r\nFirst, register an app [in Mailchimp](http://login.mailchimp.com).\r\n\r\n```javascript\r\nvar everyauth = require('everyauth')\r\n  , connect = require('connect');\r\n\r\neveryauth.mailchimp\r\n  .appId('YOUR CLIENT KEY HERE')\r\n  .appSecret('YOUR CLIENT SECRET HERE')\r\n  .myHostname(process.env.HOSTNAME || \"http://127.0.0.1:3000\")//MC requires 127.0.0.1 for dev\r\n  .findOrCreateUser( function (session, accessToken, accessTokenExtra, mailchimpUserData) {\r\n    // find or create user logic goes here\r\n    // Return a user or Promise that promises a user\r\n    // Promises are created via\r\n    //     var promise = this.Promise();\r\n    // The mailchimpUserData object contains everything from the API method getAccountDetails and an apikey. \r\n    // You'll want to work with mailchimpUserData.user_id for queries\r\n    // and mailchimpUserData.apikey for your API wrapper\r\n  })\r\n  .redirectPath('/');\r\n\r\nvar routes = function (app) {\r\n  // Define your routes here\r\n};\r\n\r\nconnect(\r\n    connect.bodyParser()\r\n  , connect.cookieParser()\r\n  , connect.session({secret: 'whodunnit'})\r\n  , everyauth.middleware()\r\n  , connect.router(routes);\r\n).listen(3000);\r\n```\r\n\r\n### Mendeley OAuth (1.0)\r\n\r\nYou will first need to [register your application](http://dev.mendeley.com/applications/register/) to get the consumer key and secret.\r\n\r\n```javascript\r\neveryauth.mendeley\r\n  .consumerKey('YOUR CONSUMER KEY HERE')\r\n  .consumerSecret('YOUR CONSUMER SECRET HERE')\r\n  .findOrCreateUser( function (sess, accessToken, accessSecret, user) {\r\n    // find or create user logic goes here\r\n    //\r\n    // e.g.,\r\n    // return usersByMendeleyId[user.main.profile_id] || (usersByMendeleyId[user.main.profile_id] = user);\r\n  })\r\n  .redirectPath('/');\r\n\r\nvar routes = function (app) {\r\n  // Define your routes here\r\n};\r\n\r\nconnect(\r\n    connect.bodyParser()\r\n  , connect.cookieParser()\r\n  , connect.session({secret: 'whodunnit'})\r\n  , everyauth.middleware()\r\n  , connect.router(routes);\r\n).listen(3000);\r\n```\r\n\r\n### OpenID protocol\r\n\r\nOpenID protocol allows you to use an openid auth request. You can read more information about it here http://openid.net/\r\n\r\n```javascript\r\nvar everyauth = require('everyauth')\r\n  , connect = require('connect');\r\n\r\neveryauth.openid\r\n  .myHostname('http://localhost:3000')\r\n  .simpleRegistration({\r\n      \"nickname\" : true\r\n    , \"email\"    : true\r\n    , \"fullname\" : true\r\n    , \"dob\"      : true\r\n    , \"gender\"   : true\r\n    , \"postcode\" : true\r\n    , \"country\"  : true\r\n    , \"language\" : true\r\n    , \"timezone\" : true\r\n  })\r\n\t.attributeExchange({\r\n      \"http://axschema.org/contact/email\"       : \"required\"\r\n    , \"http://axschema.org/namePerson/friendly\" : \"required\"\r\n    , \"http://axschema.org/namePerson\"          : \"required\"\r\n    , \"http://axschema.org/namePerson/first\"    : \"required\"\r\n    , \"http://axschema.org/contact/country/home\": \"required\"\r\n    , \"http://axschema.org/media/image/default\" : \"required\"\r\n    , \"http://axschema.org/x/media/signature\"   : \"required\"\r\n  })\r\n  .openidURLField('openid_identifier'); //The POST variable used to get the OpenID\r\n  .findOrCreateUser( function(session, openIdUserAttributes) {\r\n    // find or create user logic goes here\r\n  })\r\n  .redirectPath('/');\r\n\r\nvar routes = function (app) {\r\n  // Define your routes here\r\n};\r\n\r\nconnect(\r\n    connect.bodyParser()\r\n  , connect.cookieParser()\r\n  , connect.session({secret: 'whodunnit'})\r\n  , everyauth.middleware()\r\n  , connect.router(routes);\r\n).listen(3000);\r\n```\r\n\r\n### Google OpenID+OAuth Hybrid protocol\r\n\r\nOpenID+OAuth Hybrid protocol allows you to combine an openid auth request with a oauth access request. You can read more information about it here http://code.google.com/apis/accounts/docs/OpenID.html\r\n\r\nRegister your domain with Google\r\n[here](https://accounts.google.com/ManageDomains) and write down the\r\nconsumer key and consumer secret generated during the domain registration.\r\n\r\n```javascript\r\nvar everyauth = require('everyauth')\r\n  , connect = require('connect');\r\n\r\neveryauth.googlehybrid\r\n  .consumerKey('YOUR CONSUMER KEY HERE')\r\n  .consumerSecret('YOUR CONSUMER SECRET HERE')\r\n  .scope(['GOOGLE API SCOPE','GOOGLE API SCOPE'])\r\n  .findOrCreateUser( function(session, userAttributes) {\r\n    // find or create user logic goes here\r\n  })\r\n  .redirectPath('/');\r\n\r\nvar routes = function (app) {\r\n  // Define your routes here\r\n};\r\n\r\nconnect(\r\n    connect.bodyParser()\r\n  , connect.cookieParser()\r\n  , connect.session({secret: 'whodunnit'})\r\n  , everyauth.middleware()\r\n  , connect.router(routes);\r\n).listen(3000);\r\n```\r\n\r\n### Box.net\r\n\r\n```javascript\r\nvar everyauth = require('everyauth')\r\n  , connect = require('connect');\r\n\r\neveryauth.box\r\n  .apiKey('YOUR API KEY')\r\n  .findOrCreateUser( function (sess, authToken, boxUser) {\r\n    // find or create user logic goes here\r\n    //\r\n    // e.g.,\r\n    // return usersByBoxId[user.user_id] || (usersByBoxId[user.user_id] = user);\r\n  })\r\n  .redirectPath('/');\r\n\r\nvar routes = function (app) {\r\n  // Define your routes here\r\n};\r\n\r\nconnect(\r\n    connect.bodyParser()\r\n  , connect.cookieParser()\r\n  , connect.session({secret: 'whodunnit'})\r\n  , everyauth.middleware()\r\n  , connect.router(routes);\r\n).listen(3000);\r\n```\r\n\r\nYou can also configure more parameters (most are set to defaults) via\r\nthe same chainable API:\r\n\r\n```javascript\r\neveryauth.box\r\n  .entryPath('/auth/box')\r\n  .callbackPath('/auth/box/callback');\r\n```\r\n\r\nIf you want to see what the current value of a\r\nconfigured parameter is, you can do so via:\r\n\r\n```javascript\r\neveryauth.box.callbackPath(); // '/auth/box/callback'\r\neveryauth.box.entryPath(); // '/auth/box'\r\n```\r\n\r\nTo see all parameters that are configurable, the following will return an\r\nobject whose parameter name keys map to description values:\r\n\r\n```javascript\r\neveryauth.box.configurable();\r\n```\r\n\r\n### LDAP\r\n\r\nThe LDAP module is still in development. Do not use it in production yet.\r\n\r\nInstall OpenLDAP client libraries:\r\n\r\n    $ apt-get install slapd ldap-utils\r\n\r\nInstall [node-ldapauth](https://github.com/joewalnes/node-ldapauth):\r\n\r\n```javascript\r\nvar everyauth = require('everyauth')\r\n  , connect = require('connect');\r\n\r\neveryauth.ldap\r\n  .host('your.ldap.host')\r\n  .port(389)\r\n\r\n  // The `ldap` module inherits from the `password` module, so \r\n  // refer to the `password` module instructions several sections above\r\n  // in this README.\r\n  // You do not need to configure the `authenticate` step as instructed\r\n  // by `password` because the `ldap` module already does that for you.\r\n  // Moreover, all the registration related steps and configurable parameters\r\n  // are no longer valid\r\n  .getLoginPath(...)\r\n  .postLoginPath(...)\r\n  .loginView(...)\r\n  .loginSuccessRedirect(...);\r\n\r\nvar routes = function (app) {\r\n  // Define your routes here\r\n};\r\n\r\nconnect(\r\n    connect.bodyParser()\r\n  , connect.cookieParser()\r\n  , connect.session({secret: 'whodunnit'})\r\n  , everyauth.middleware()\r\n  , connect.router(routes);\r\n).listen(3000);\r\n```\r\n\r\n### Windows Azure Access Control Service (ACS)\r\n\r\nYou will need to create a [Windows Azure ACS namespace](http://msdn.microsoft.com/en-us/library/windowsazure/hh674478.aspx). The only caveat when creating the namespace is setting the \"Return URL\". You will probably [create one Relying Party](http://msdn.microsoft.com/en-us/library/windowsazure/gg429779.aspx) for each environment (dev, qa, prod) and each of them will have a different \"Return URL\". For instance, dev will be `http://localhost:port/auth/azureacs/callback` and prod could be `https://myapp.com/auth/azureacs/callback` (notice the `/auth/azureacs/callback`, that's where the module will listen the POST with the token from ACS)\r\n\r\n```javascript\r\nvar everyauth = require('everyauth')\r\n  , connect = require('connect');\r\n\r\neveryauth.azureacs\r\n      .identityProviderUrl('https://YOURNAMESPACE.accesscontrol.windows.net/v2/wsfederation/')\r\n      .entryPath('/auth/azureacs')\r\n      .callbackPath('/auth/azureacs/callback')\r\n      .signingKey('d0jul....YOUR_SIGNINGK=_KEY......OEvz24=')\r\n      .realm('YOUR_APPLICATION_REALM_IDENTIFIER')\r\n      .homeRealm('') // if you want to use a default idp (like google/liveid)\r\n      .tokenFormat('swt')  // only swt supported for now\r\n      .findOrCreateUser( function (session, acsUser) {\r\n         // you could enrich the \"user\" entity by storing/fetching the user from a db\r\n        return null;\r\n      });\r\n      .redirectPath('/');\r\n\r\n\r\nvar routes = function (app) {\r\n  // Define your routes here\r\n};\r\n\r\nconnect(\r\n    connect.bodyParser()\r\n  , connect.cookieParser()\r\n  , connect.session({secret: 'whodunnit'})\r\n  , everyauth.middleware()\r\n  , connect.router(routes);\r\n).listen(3000);\r\n```\r\n\r\nIf you want to see what the current value of a\r\nconfigured parameter is, you can do so via:\r\n\r\n```javascript\r\neveryauth.box.callbackPath(); // '/auth/azureacs/callback'\r\n```\r\n\r\nTo see all parameters that are configurable, the following will return an\r\nobject whose parameter name keys map to description values:\r\n\r\n```javascript\r\neveryauth.box.configurable();\r\n```\r\n\r\n## Configuring a Module\r\n\r\neveryauth was built with powerful configuration needs in mind.\r\n\r\nEvery module comes with a set of parameters that you can configure\r\ndirectly. To see a list of those parameters on a per module basis, \r\nwith descriptions about what they do, enter the following into the \r\nnode REPL (to access the REPL, just type `node` at the command line)\r\n\r\n    > var ea = require('everyauth');\r\n    > ea.facebook.configurable();\r\n\r\nFor example, you will see that one of the configuration parameters is\r\n`moduleTimeout`, which is described to be `how long to wait per step\r\nbefore timing out and invoking any timeout callbacks`\r\n\r\nEvery configuration parameter corresponds to a method of the same name\r\non the auth module under consideration (i.e., in this case\r\n`ea.facebook`). To create or over-write that parameter, just\r\ncall that method with the new value as the argument:\r\n\r\n```javascript\r\nea.facebook\r\n  .moduleTimeout( 4000 ); // Wait 4 seconds before timing out any step\r\n                          // involved in the facebook auth process\r\n```\r\n\r\nConfiguration parameters can be scalars. But they can be anything. For\r\nexample, they can also be functions, too. The facebook module has a \r\nconfigurable step named `findOrCreateUser` that is described as \r\n\"STEP FN [findOrCreateUser] function encapsulating the logic for the step\r\n`fetchOAuthUser`.\". What this means is that this configures the \r\nfunction (i.e., \"FN\") that encapsulates the logic of this step.\r\n\r\n```javascript\r\nea.facebook\r\n  .findOrCreateUser( function (session, accessToken, extra, oauthUser) {\r\n    // find or create user logic goes here\r\n  });\r\n```\r\n\r\nHow do we know what arguments the function takes?\r\nWe elaborate more about step function configuration in our \r\n`Introspection` section below.\r\n\r\n### For coffee-script lovers\r\n\r\nEveryauth also supports a special method `configure` for coffee-script\r\naficionados. Coffee and chainable APIs often don't mix well. As an alternative,\r\nyou can configure an everyauth module using an `Object` passed to `configure`:\r\n\r\n```coffee\r\neveryauth.dropbox.configure\r\n  consumerKey:       conf.dropbox.consumerKey\r\n  consumerSecret:    conf.dropbox.consumerSecret\r\n  findOrCreateUser:  (sess, accessToken, accessSecret, dbMeta) -> users[dbMeta.uid] or= addUser('dropbox', dbMeta)\r\n  redirectPath:      '/'\r\n```\r\n\r\n## Introspection\r\n\r\neveryauth provides convenient methods and getters for finding out\r\nabout any module.\r\n\r\nShow all configurable parameters with their descriptions:\r\n\r\n```javascript\r\neveryauth.facebook.configurable();\r\n```\r\n\r\nShow the value of a single configurable parameter:\r\n\r\n```javascript\r\n// Get the value of the configurable callbackPath parameter\r\neveryauth.facebook.callbackPath(); // => '/auth/facebook/callback'\r\n```\r\n\r\nShow the declared routes (pretty printed):\r\n\r\n```javascript\r\neveryauth.facebook.routes;\r\n```\r\n\r\nShow the steps initiated by a given route:\r\n\r\n```javascript\r\neveryauth.facebook.route.get.entryPath.steps; \r\neveryauth.facebook.route.get.callbackPath.steps;\r\n```\r\n\r\nSometimes you need to set up additional steps for a given auth\r\nmodule, by defining that step in your app. For example, the\r\nset of steps triggered when someone requests the facebook\r\nmodule's `callbackPath` contains a step that you must define\r\nin your app. To see what that step is, you can introspect\r\nthe `callbackPath` route with the facebook module.\r\n\r\n```javascript\r\neveryauth.facebook.route.get.callbackPath.steps.incomplete;\r\n// => [ { name: 'findOrCreateUser',\r\n//        error: 'is missing: its function' } ]\r\n```\r\n\r\nThis tells you that you must define the function that defines the\r\nlogic for the `findOrCreateUser` step. To see what the function \r\nsignature looks like for this step:\r\n\r\n```javascript\r\nvar matchingStep =\r\neveryauth.facebook.route.get.callbackPath.steps.filter( function (step) {\r\n  return step.name === 'findOrCreateUser';\r\n})[0];\r\n// { name: 'findOrCreateUser',\r\n//   accepts: [ 'session', 'accessToken', 'extra', 'oauthUser' ],\r\n//   promises: [ 'user' ] }\r\n```\r\n\r\nThis tells you that the function should take the following 4 arguments:\r\n\r\n```javascript\r\nfunction (session, accessToken, extra, oauthUser) {\r\n  ...\r\n}\r\n```\r\n\r\nAnd that the function should return a `user` that is a user object or\r\na Promise that promises a user object.\r\n\r\n```javascript\r\n// For synchronous lookup situations, you can return a user\r\nfunction (session, accessToken, extra, oauthUser) {\r\n  ...\r\n  return { id: 'some user id', username: 'some user name' };\r\n}\r\n\r\n// OR\r\n\r\n// For asynchronous lookup situations, you must return a Promise that\r\n// will be fulfilled with a user later on\r\nfunction (session, accessToken, extra, oauthUser) {\r\n  var promise = this.Promise();\r\n  asyncFindUser( function (err, user) {\r\n    if (err) return promise.fail(err);\r\n    promise.fulfill(user);\r\n  });\r\n  return promise;\r\n}\r\n```\r\n\r\nYou add this function as the block for the step `findOrCreateUser` just like\r\nyou configure any other configurable parameter in your auth module:\r\n\r\n```javascript\r\neveryauth.facebook\r\n  .findOrCreateUser( function (session, accessToken, extra, oauthUser) {\r\n    // Logic goes here\r\n  });\r\n```\r\n\r\nThere are also several other introspection tools at your disposal:\r\n\r\nFor example, to show the submodules of an auth module by name:\r\n\r\n```javascript\r\neveryauth.oauth2.submodules;\r\n```\r\n\r\nOther introspection tools to describe (explanations coming soon):\r\n\r\n- *Invalid Steps*\r\n    \r\n    ```javascript\r\n    everyauth.facebook.routes.get.callbackPath.steps.invalid\r\n    ```\r\n\r\n## Debugging\r\n\r\n### Debugging - Logging Module Steps\r\n\r\nTo turn on debugging:\r\n\r\n```javascript\r\neveryauth.debug = true;\r\n```\r\n\r\nEach everyauth auth strategy module is composed of steps. As each step begins and ends, everyauth will print out to the console the beginning and end of each step. So by turning on the debug flag, you get insight into what step everyauth is executing at any time.\r\n\r\nFor example, here is some example debugging information output to the console\r\nduring a Facebook Connect authorization:\r\n\r\n```\r\nstarting step - getAuthUri\r\n...finished step\r\nstarting step - requestAuthUri\r\n...finished step\r\nstarting step - getCode\r\n...finished step\r\nstarting step - getAccessToken\r\n...finished step\r\nstarting step - fetchOAuthUser\r\n...finished step\r\nstarting step - getSession\r\n...finished step\r\nstarting step - findOrCreateUser\r\n...finished step\r\nstarting step - compile\r\n...finished step\r\nstarting step - addToSession\r\n...finished step\r\nstarting step - sendResponse\r\n...finished step\r\n```\r\n\r\n### Debugging - Configuring Error Handling\r\n\r\nBy default, all modules handle errors by throwing them. That said, `everyauth` allows\r\nyou to over-ride this behavior.\r\n\r\nYou can configure error handling at the module and step level. To handle *all*\r\nerrors in the same manner across all auth modules that you use, do the following.\r\n\r\n```javascript\r\neveryauth.everymodule.moduleErrback( function (err) {\r\n  // Do something with the err -- e.g., log it, throw it\r\n});\r\n```\r\n\r\nYou can also configure your error handling on a per module basis. So, for example, if\r\nyou want to handle errors during the Facebook module differently than in other modules:\r\n\r\n\r\n```javascript\r\neveryauth.facebook.moduleErrback( function (err) {\r\n  // Do something with the err -- e.g., log it, throw it\r\n});\r\n```\r\n\r\n### Debugging - Setting Timeouts\r\n\r\nBy default, every module has 10 seconds to complete each step. If a step takes longer than 10 seconds to complete, then everyauth will pass a timeout error to your configured error handler (see section \"Configure Error Handling\" above).\r\n\r\nIf you would like to increase or decrease the timeout period across all modules, you can do so via:\r\n\r\n```javascript\r\neveryauth.everymodule.moduleTimeout(2000); // Wait 2 seconds per step instead before timing out\r\n```\r\n\r\nYou can eliminate the timeout altogether by configuring your timeouts to -1:\r\n\r\n```javascript\r\neveryauth.everymodule.moduleTimeout(-1);\r\n```\r\n\r\nYou can also configure the timeout period on a per module basis. For example, the following will result in the facebook module having 3 seconds to complete each step before timing out; all other modules will have the default 10 seconds per step before timing out.\r\n\r\n```javascript\r\neveryauth.facebook.moduleTimeout(3000); // Wait 3 seconds\r\n```\r\n\r\n## In the Wild\r\n\r\nThe following projects use everyauth.\r\n\r\nIf you are using everyauth in a project, app, or module, get on the list below\r\nby getting in touch or submitting a pull request with changes to the README.\r\n\r\n### Startups & Apps\r\n\r\n- [Storify](http://storify.com/)\r\n- [DoodleOrDie](http://doodleordie.com/)\r\n- [Furkot](http://trips.furkot.com/)\r\n\r\n### Modules\r\n\r\n- [mongoose-auth](https://github.com/bnoguchi/mongoose-auth) Authorization plugin\r\n  for use with the node.js MongoDB orm.\r\n- [Heroku's Facebook Node.JS\r\n  Template](https://github.com/heroku/facebook-template-nodejs)\r\n- [node-express-boilerplate](https://github.com/mape/node-express-boilerplate)\r\n- [ExpressStarter](https://github.com/JustinBeckwith/ExpressStarter)\r\n\r\n## Tutorials\r\n\r\nThe following are 3rd party screencasts and blog posts about either getting up\r\nand running with everyauth or writing your own everyauth modules to support a\r\nnew service.\r\n\r\nIf you would like your blog post to be included, please submit a pull request\r\nwith changes to the README.\r\n\r\n- [NodeTuts: Starting with everyauth](http://nodetuts.com/tutorials/26-starting-with-everyauth.html#video)\r\n- [Node.js modules you should know about:\r\n  everyauth](http://www.catonmat.net/blog/nodejs-modules-everyauth/)\r\n- [Implementing Windows Azure ACS with\r\n  everyauth](http://nodeblog.cloudapp.net/implementing-windows-azure-acs-with-everyauth)\r\n- [OAuth: Logging In with EveryAuth and NodeJS](http://blog.koostudios.com/?p=453)\r\n- [Calling the github API with node.js](http://www.garann.com/dev/2011/calling-the-github-api-with-node-js/)\r\n- [Simple Node.js Express MVR Template](http://benedmunds.com/2012/04/19/simple-nodejs-express-mvr-template/)\r\n\r\n---\r\n## Author\r\nBrian Noguchi\r\n\r\n## Credits\r\n\r\nThanks to the following contributors for the following modules:\r\n\r\n- [RocketLabs Development](https://github.com/rocketlabsdev) for contributing\r\n  - OpenId\r\n  - Google Hybrid\r\n- [Andrew Mee](https://github.com/starfishmod)\r\n  - OpenId\r\n- [Alfred Nerstu](https://github.com/alfrednerstu)\r\n  - Readability\r\n- [Torgeir](https://github.com/torgeir)\r\n  - DropBox\r\n- [slickplaid](https://github.com/slickplaid)\r\n  - Justin.tv\r\n  - Vimeo\r\n- [Andrew Kramolisch](https://github.com/andykram)\r\n  - Gowalla\r\n- [Kenan Shifflett](https://github.com/nanek)\r\n  - Dwolla\r\n- [Alexey Simonenko](https://github.com/meritt)\r\n  - VKontakte\r\n- [Alexey Gordeyev](https://github.com/biggora)\r\n  - Mail.ru\r\n- [Rodolphe Stoclin](https://github.com/srod)\r\n  - Skyrock\r\n- [Danny Amey](https://github.com/dannyamey)\r\n  - 500px\r\n  - Evernote\r\n- [Chris Leishman](https://github.com/chrisleishman)\r\n  - SoundCloud\r\n\r\n## MIT License\r\nCopyright (c) 2011 by Brian Noguchi\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in\r\nall copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\nTHE SOFTWARE.\r\n",
  "readmeFilename": "README.md",
  "_id": "everyauth@0.2.34",
  "dist": {
    "shasum": "cb5aa43237f6a317af82fa2737b7ad7c67a438e4"
  },
  "_resolved": "git://github.com/Sea2C/everyauth.git#fae1d4be955c4f71cd96edcdf4fd0a3631f424fa",
  "_from": "everyauth@git://github.com/Sea2C/everyauth.git#issue-387"
}
